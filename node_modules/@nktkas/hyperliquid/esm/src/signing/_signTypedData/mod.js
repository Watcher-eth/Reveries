import { isAbstractEthersSigner, isAbstractEthersV5Signer, } from "./ethers.js";
import { isValidPrivateKey, signTypedData as signTypedDataWithPrivateKey } from "./private_key.js";
import { isAbstractViemWalletClient } from "./viem.js";
import { isAbstractWindowEthereum, signTypedDataWithWindowEthereum } from "./window.js";
export { isAbstractEthersSigner, isAbstractEthersV5Signer, isAbstractViemWalletClient, isAbstractWindowEthereum, isValidPrivateKey, };
export async function signTypedData(args) {
    const { wallet, domain, types, primaryType, message } = args;
    let signature;
    if (isValidPrivateKey(wallet)) {
        signature = await signTypedDataWithPrivateKey({
            privateKey: wallet,
            domain,
            types,
            primaryType,
            message,
        });
    }
    else if (isAbstractViemWalletClient(wallet)) {
        signature = await wallet.signTypedData({
            domain,
            types: {
                EIP712Domain: [
                    { name: "name", type: "string" },
                    { name: "version", type: "string" },
                    { name: "chainId", type: "uint256" },
                    { name: "verifyingContract", type: "address" },
                ],
                ...types,
            },
            primaryType,
            message,
        });
    }
    else if (isAbstractEthersSigner(wallet)) {
        signature = await wallet.signTypedData(domain, types, message);
    }
    else if (isAbstractEthersV5Signer(wallet)) {
        signature = await wallet._signTypedData(domain, types, message);
    }
    else if (isAbstractWindowEthereum(wallet)) {
        signature = await signTypedDataWithWindowEthereum({
            ethereum: wallet,
            domain,
            types,
            primaryType,
            message,
        });
    }
    else {
        throw new Error("Unsupported wallet for signing typed data");
    }
    return splitSignature(signature);
}
function splitSignature(signature) {
    const r = `0x${signature.slice(2, 66)}`;
    const s = `0x${signature.slice(66, 130)}`;
    const v = parseInt(signature.slice(130, 132), 16);
    return { r, s, v };
}

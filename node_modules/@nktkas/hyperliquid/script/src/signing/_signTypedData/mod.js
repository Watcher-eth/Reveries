"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isValidPrivateKey = exports.isAbstractWindowEthereum = exports.isAbstractViemWalletClient = exports.isAbstractEthersV5Signer = exports.isAbstractEthersSigner = void 0;
exports.signTypedData = signTypedData;
const ethers_js_1 = require("./ethers.js");
Object.defineProperty(exports, "isAbstractEthersSigner", { enumerable: true, get: function () { return ethers_js_1.isAbstractEthersSigner; } });
Object.defineProperty(exports, "isAbstractEthersV5Signer", { enumerable: true, get: function () { return ethers_js_1.isAbstractEthersV5Signer; } });
const private_key_js_1 = require("./private_key.js");
Object.defineProperty(exports, "isValidPrivateKey", { enumerable: true, get: function () { return private_key_js_1.isValidPrivateKey; } });
const viem_js_1 = require("./viem.js");
Object.defineProperty(exports, "isAbstractViemWalletClient", { enumerable: true, get: function () { return viem_js_1.isAbstractViemWalletClient; } });
const window_js_1 = require("./window.js");
Object.defineProperty(exports, "isAbstractWindowEthereum", { enumerable: true, get: function () { return window_js_1.isAbstractWindowEthereum; } });
async function signTypedData(args) {
    const { wallet, domain, types, primaryType, message } = args;
    let signature;
    if ((0, private_key_js_1.isValidPrivateKey)(wallet)) {
        signature = await (0, private_key_js_1.signTypedData)({
            privateKey: wallet,
            domain,
            types,
            primaryType,
            message,
        });
    }
    else if ((0, viem_js_1.isAbstractViemWalletClient)(wallet)) {
        signature = await wallet.signTypedData({
            domain,
            types: {
                EIP712Domain: [
                    { name: "name", type: "string" },
                    { name: "version", type: "string" },
                    { name: "chainId", type: "uint256" },
                    { name: "verifyingContract", type: "address" },
                ],
                ...types,
            },
            primaryType,
            message,
        });
    }
    else if ((0, ethers_js_1.isAbstractEthersSigner)(wallet)) {
        signature = await wallet.signTypedData(domain, types, message);
    }
    else if ((0, ethers_js_1.isAbstractEthersV5Signer)(wallet)) {
        signature = await wallet._signTypedData(domain, types, message);
    }
    else if ((0, window_js_1.isAbstractWindowEthereum)(wallet)) {
        signature = await (0, window_js_1.signTypedDataWithWindowEthereum)({
            ethereum: wallet,
            domain,
            types,
            primaryType,
            message,
        });
    }
    else {
        throw new Error("Unsupported wallet for signing typed data");
    }
    return splitSignature(signature);
}
function splitSignature(signature) {
    const r = `0x${signature.slice(2, 66)}`;
    const s = `0x${signature.slice(66, 130)}`;
    const v = parseInt(signature.slice(130, 132), 16);
    return { r, s, v };
}

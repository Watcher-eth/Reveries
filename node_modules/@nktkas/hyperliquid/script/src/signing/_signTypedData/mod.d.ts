import type { Hex } from "../../base.js";
import { type AbstractEthersSigner, type AbstractEthersV5Signer, isAbstractEthersSigner, isAbstractEthersV5Signer } from "./ethers.js";
import { isValidPrivateKey } from "./private_key.js";
import { type AbstractViemWalletClient, isAbstractViemWalletClient } from "./viem.js";
import { type AbstractWindowEthereum, isAbstractWindowEthereum } from "./window.js";
export { type AbstractEthersSigner, type AbstractEthersV5Signer, type AbstractViemWalletClient, type AbstractWindowEthereum, isAbstractEthersSigner, isAbstractEthersV5Signer, isAbstractViemWalletClient, isAbstractWindowEthereum, isValidPrivateKey, };
/** Abstract interface for a wallet that can sign typed data. */
export type AbstractWallet = Hex | AbstractViemWalletClient | AbstractEthersSigner | AbstractEthersV5Signer | AbstractWindowEthereum;
/** ECDSA signature components for Ethereum transactions and typed data. */
export interface Signature {
    /** First 32-byte component of ECDSA signature */
    r: Hex;
    /** Second 32-byte component of ECDSA signature */
    s: Hex;
    /** Recovery identifier (27 or 28, or 0 or 1 for EIP-155) */
    v: number;
}
export declare function signTypedData(args: {
    wallet: AbstractWallet;
    domain: {
        name: string;
        version: string;
        chainId: number;
        verifyingContract: Hex;
    };
    types: {
        [key: string]: {
            name: string;
            type: string;
        }[];
    };
    primaryType: string;
    message: Record<string, unknown>;
}): Promise<Signature>;
//# sourceMappingURL=mod.d.ts.map
import * as _react_navigation_native from '@react-navigation/native';
import { ScreenListeners, NavigationState, EventMapBase, RouteProp, ParamListBase, NavigatorTypeBagBase, StackNavigationState, TypedNavigator } from '@react-navigation/native';
import * as react_native from 'react-native';
import { ScaledSize, View } from 'react-native';
import * as react_native_reanimated from 'react-native-reanimated';
import { SharedValue, StyleProps, WithSpringConfig, WithTimingConfig, AnimatedProps } from 'react-native-reanimated';
import { EdgeInsets } from 'react-native-safe-area-context';
import * as react_native_reanimated_lib_typescript_layoutReanimation_animationBuilder_Keyframe from 'react-native-reanimated/lib/typescript/layoutReanimation/animationBuilder/Keyframe';
import * as react from 'react';
import react__default, { ComponentType } from 'react';
import * as react_jsx_runtime from 'react/jsx-runtime';
import { NativeStackNavigationOptions, NativeStackNavigationEventMap, NativeStackNavigationProp, NativeStackNavigatorProps } from '@react-navigation/native-stack';

type Any = any;
interface TransitionConfig {
    /**
     * The user-provided function to calculate styles based on animation progress.
     */
    screenStyleInterpolator?: ScreenStyleInterpolator;
    /**
     * The Reanimated animation config for opening and closing transitions.
     */
    transitionSpec?: TransitionSpec;
    /**
     * Whether the gesture is enabled.
     */
    gestureEnabled?: boolean;
    /**
     * The direction of the swipe gesture used to dismiss the screen.
     */
    gestureDirection?: GestureDirection | GestureDirection[];
    /**
     * How much the gesture's final velocity impacts the dismiss decision.
     */
    gestureVelocityImpact?: number;
    /**
     * Distance threshold for gesture recognition throughout the screen.
     */
    gestureResponseDistance?: number;
    /**
     * Skip the default screen options.
     */
    skipDefaultScreenOptions?: boolean;
}
/**
 * The comprehensive props object passed to a `ScreenStyleInterpolator` function.
 * It contains all the necessary data to calculate styles for a transition.
 */
interface ScreenInterpolationProps {
    /** Values for the screen that is the focus of the transition (e.g., the one opening). */
    current: {
        /** The programmatic animation progress of the screen (a `SharedValue` from 0 to 1). */
        progress: SharedValue<number>;
        /** Live gesture values for the screen. */
        gesture: GestureValues;
    };
    /** Values for the screen immediately behind the current one in the screen. */
    next: {
        /** The programmatic animation progress of the next screen. */
        progress: SharedValue<number>;
        /** Live gesture values for the next screen. */
        gesture: GestureValues;
    } | undefined;
    /** Layout measurements for the screen. */
    layouts: {
        /** The `width` and `height` of the screen container. */
        screen: ScaledSize;
    };
    /** The safe area insets for the screen. */
    insets: EdgeInsets;
    /** A flag indicating if the current screen is in the process of closing. */
    closing: boolean;
}
type GestureValues = {
    /**
     * A `SharedValue` indicating if the user's finger is on the screen (0 or 1).
     */
    isDragging: SharedValue<number>;
    /**
     * The live horizontal translation of the gesture.
     */
    x: SharedValue<number>;
    /**
     * The live vertical translation of the gesture.
     */
    y: SharedValue<number>;
    /**
     * The live normalized horizontal translation of the gesture (-1 to 1).
     */
    normalizedX: SharedValue<number>;
    /**
     * The live normalized vertical translation of the gesture (-1 to 1).
     */
    normalizedY: SharedValue<number>;
    /**
     * A flag indicating if the screen is in the process of dismissing.
     */
    isDismissing: SharedValue<number>;
};
type ScreenStyleInterpolator = (props: ScreenInterpolationProps) => TransitionInterpolatedStyle;
type TransitionInterpolatedStyle = {
    /**
     * Animated style for the main screen view. Styles are only applied when Transition.View is present.
     */
    contentStyle?: StyleProps;
    /**
     * Animated style for a semi-transparent overlay. Styles are only applied when Transition.View is present.
     */
    overlayStyle?: StyleProps;
};
/**
 * A Reanimated animation configuration object.
 */
type AnimationConfig = WithSpringConfig | WithTimingConfig;
/**
 * Defines separate animation configurations for opening and closing a screen.
 */
interface TransitionSpec {
    open?: AnimationConfig;
    close?: AnimationConfig;
}
type GestureDirection = "horizontal" | "horizontal-inverted" | "vertical" | "vertical-inverted" | "bidirectional";
type TransitionListeners = ScreenListeners<NavigationState, EventMapBase>;

interface TransitionEventHandlersProps extends TransitionConfig {
    navigation: Any;
    route: RouteProp<ParamListBase, string>;
}

declare function createTransitionAwareComponent<P extends object>(Wrapped: ComponentType<P>): react__default.MemoExoticComponent<react__default.ForwardRefExoticComponent<AnimatedProps<P> & react__default.RefAttributes<react__default.ComponentRef<typeof Wrapped>>>>;

declare function createTransitionAwareScrollable<P extends object>(ScrollableComponent: ComponentType<P>): React.MemoExoticComponent<React.ForwardRefExoticComponent<AnimatedProps<P> & React.RefAttributes<React.ComponentRef<typeof ScrollableComponent>>>>;

declare const SlideFromTop: (config?: Partial<TransitionConfig>) => TransitionConfig;
declare const ZoomIn: (config?: Partial<TransitionConfig>) => TransitionConfig;
declare const SlideFromBottom: (config?: Partial<TransitionConfig>) => TransitionConfig;
declare const DraggableCard: (config?: Partial<TransitionConfig>) => TransitionConfig;
declare const ElasticCard: (config?: Partial<TransitionConfig> & {
    elasticFactor?: number;
}) => TransitionConfig;

declare const presets_DraggableCard: typeof DraggableCard;
declare const presets_ElasticCard: typeof ElasticCard;
declare const presets_SlideFromBottom: typeof SlideFromBottom;
declare const presets_SlideFromTop: typeof SlideFromTop;
declare const presets_ZoomIn: typeof ZoomIn;
declare namespace presets {
  export { presets_DraggableCard as DraggableCard, presets_ElasticCard as ElasticCard, presets_SlideFromBottom as SlideFromBottom, presets_SlideFromTop as SlideFromTop, presets_ZoomIn as ZoomIn };
}

declare const DefaultSpec: WithSpringConfig;

declare const specs_DefaultSpec: typeof DefaultSpec;
declare namespace specs {
  export { specs_DefaultSpec as DefaultSpec };
}

declare const useScreenAnimation: () => ScreenInterpolationProps;

type TransitionStackNavigationEventMap = NativeStackNavigationEventMap;
interface TransitionStackNavigationOptions extends Omit<NativeStackNavigationOptions, keyof TransitionConfig>, TransitionConfig {
    skipDefaultScreenOptions?: boolean;
}
type TransitionStackNavigationProp<ParamList extends ParamListBase, RouteName extends keyof ParamList = string, NavigatorID extends string | undefined = undefined> = NativeStackNavigationProp<ParamList, RouteName, NavigatorID>;
type TransitionStackNavigatorProps = NativeStackNavigatorProps;
declare function TransitionableStackNavigator({ id, initialRouteName, children, layout, screenListeners, screenOptions, screenLayout, UNSTABLE_router, ...rest }: TransitionStackNavigatorProps): react_jsx_runtime.JSX.Element;
declare function createTransitionableStackNavigator<const ParamList extends ParamListBase, const NavigatorID extends string | undefined = undefined, const TypeBag extends NavigatorTypeBagBase = {
    ParamList: ParamList;
    NavigatorID: NavigatorID;
    State: StackNavigationState<ParamList>;
    ScreenOptions: TransitionStackNavigationOptions;
    EventMap: TransitionStackNavigationEventMap;
    NavigationList: {
        [RouteName in keyof ParamList]: TransitionStackNavigationProp<ParamList, RouteName, NavigatorID>;
    };
    Navigator: typeof TransitionableStackNavigator;
}>(): TypedNavigator<TypeBag>;
type TransitionStackNavigatorTypeBag<ScreenOptions = TransitionStackNavigationOptions, State = StackNavigationState<ParamListBase>, EventMap = TransitionStackNavigationEventMap> = {
    ScreenOptions: ScreenOptions;
    State: State;
    EventMap: EventMap;
};

declare const _default: {
    View: react.MemoExoticComponent<react.ForwardRefExoticComponent<{
        children?: react.ReactNode | react_native_reanimated.SharedValue<react.ReactNode>;
        hitSlop?: number | react_native.Insets | react_native_reanimated.SharedValue<number | react_native.Insets | null | undefined> | null | undefined;
        id?: string | react_native_reanimated.SharedValue<string | undefined> | undefined;
        needsOffscreenAlphaCompositing?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        onLayout?: ((event: react_native.LayoutChangeEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.LayoutChangeEvent) => void) | undefined> | undefined;
        pointerEvents?: "auto" | "none" | "box-none" | "box-only" | react_native_reanimated.SharedValue<"auto" | "none" | "box-none" | "box-only" | undefined> | undefined;
        removeClippedSubviews?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        testID?: string | react_native_reanimated.SharedValue<string | undefined> | undefined;
        nativeID?: string | react_native_reanimated.SharedValue<string | undefined> | undefined;
        collapsable?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        collapsableChildren?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        renderToHardwareTextureAndroid?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        focusable?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        tabIndex?: 0 | -1 | react_native_reanimated.SharedValue<0 | -1 | undefined> | undefined;
        shouldRasterizeIOS?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        isTVSelectable?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        hasTVPreferredFocus?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        tvParallaxShiftDistanceX?: number | react_native_reanimated.SharedValue<number | undefined> | undefined;
        tvParallaxShiftDistanceY?: number | react_native_reanimated.SharedValue<number | undefined> | undefined;
        tvParallaxTiltAngle?: number | react_native_reanimated.SharedValue<number | undefined> | undefined;
        tvParallaxMagnification?: number | react_native_reanimated.SharedValue<number | undefined> | undefined;
        onStartShouldSetResponder?: ((event: react_native.GestureResponderEvent) => boolean) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => boolean) | undefined> | undefined;
        onMoveShouldSetResponder?: ((event: react_native.GestureResponderEvent) => boolean) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => boolean) | undefined> | undefined;
        onResponderEnd?: ((event: react_native.GestureResponderEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => void) | undefined> | undefined;
        onResponderGrant?: ((event: react_native.GestureResponderEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => void) | undefined> | undefined;
        onResponderReject?: ((event: react_native.GestureResponderEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => void) | undefined> | undefined;
        onResponderMove?: ((event: react_native.GestureResponderEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => void) | undefined> | undefined;
        onResponderRelease?: ((event: react_native.GestureResponderEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => void) | undefined> | undefined;
        onResponderStart?: ((event: react_native.GestureResponderEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => void) | undefined> | undefined;
        onResponderTerminationRequest?: ((event: react_native.GestureResponderEvent) => boolean) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => boolean) | undefined> | undefined;
        onResponderTerminate?: ((event: react_native.GestureResponderEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => void) | undefined> | undefined;
        onStartShouldSetResponderCapture?: ((event: react_native.GestureResponderEvent) => boolean) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => boolean) | undefined> | undefined;
        onMoveShouldSetResponderCapture?: ((event: react_native.GestureResponderEvent) => boolean) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => boolean) | undefined> | undefined;
        onTouchStart?: ((event: react_native.GestureResponderEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => void) | undefined> | undefined;
        onTouchMove?: ((event: react_native.GestureResponderEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => void) | undefined> | undefined;
        onTouchEnd?: ((event: react_native.GestureResponderEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => void) | undefined> | undefined;
        onTouchCancel?: ((event: react_native.GestureResponderEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => void) | undefined> | undefined;
        onTouchEndCapture?: ((event: react_native.GestureResponderEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => void) | undefined> | undefined;
        onPointerEnter?: ((event: react_native.PointerEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.PointerEvent) => void) | undefined> | undefined;
        onPointerEnterCapture?: ((event: react_native.PointerEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.PointerEvent) => void) | undefined> | undefined;
        onPointerLeave?: ((event: react_native.PointerEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.PointerEvent) => void) | undefined> | undefined;
        onPointerLeaveCapture?: ((event: react_native.PointerEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.PointerEvent) => void) | undefined> | undefined;
        onPointerMove?: ((event: react_native.PointerEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.PointerEvent) => void) | undefined> | undefined;
        onPointerMoveCapture?: ((event: react_native.PointerEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.PointerEvent) => void) | undefined> | undefined;
        onPointerCancel?: ((event: react_native.PointerEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.PointerEvent) => void) | undefined> | undefined;
        onPointerCancelCapture?: ((event: react_native.PointerEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.PointerEvent) => void) | undefined> | undefined;
        onPointerDown?: ((event: react_native.PointerEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.PointerEvent) => void) | undefined> | undefined;
        onPointerDownCapture?: ((event: react_native.PointerEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.PointerEvent) => void) | undefined> | undefined;
        onPointerUp?: ((event: react_native.PointerEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.PointerEvent) => void) | undefined> | undefined;
        onPointerUpCapture?: ((event: react_native.PointerEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.PointerEvent) => void) | undefined> | undefined;
        accessible?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        accessibilityActions?: readonly Readonly<{
            name: react_native.AccessibilityActionName | string;
            label?: string | undefined;
        }>[] | react_native_reanimated.SharedValue<readonly Readonly<{
            name: react_native.AccessibilityActionName | string;
            label?: string | undefined;
        }>[] | undefined> | undefined;
        accessibilityLabel?: string | react_native_reanimated.SharedValue<string | undefined> | undefined;
        'aria-label'?: string | react_native_reanimated.SharedValue<string | undefined> | undefined;
        accessibilityRole?: react_native.AccessibilityRole | react_native_reanimated.SharedValue<react_native.AccessibilityRole | undefined> | undefined;
        accessibilityState?: react_native.AccessibilityState | react_native_reanimated.SharedValue<react_native.AccessibilityState | undefined> | undefined;
        'aria-busy'?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        'aria-checked'?: boolean | "mixed" | react_native_reanimated.SharedValue<boolean | "mixed" | undefined> | undefined;
        'aria-disabled'?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        'aria-expanded'?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        'aria-selected'?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        accessibilityHint?: string | react_native_reanimated.SharedValue<string | undefined> | undefined;
        accessibilityValue?: react_native.AccessibilityValue | react_native_reanimated.SharedValue<react_native.AccessibilityValue | undefined> | undefined;
        'aria-valuemax'?: number | react_native_reanimated.SharedValue<number | undefined> | undefined;
        'aria-valuemin'?: number | react_native_reanimated.SharedValue<number | undefined> | undefined;
        'aria-valuenow'?: number | react_native_reanimated.SharedValue<number | undefined> | undefined;
        'aria-valuetext'?: string | react_native_reanimated.SharedValue<string | undefined> | undefined;
        onAccessibilityAction?: ((event: react_native.AccessibilityActionEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.AccessibilityActionEvent) => void) | undefined> | undefined;
        importantForAccessibility?: "auto" | "yes" | "no" | "no-hide-descendants" | react_native_reanimated.SharedValue<"auto" | "yes" | "no" | "no-hide-descendants" | undefined> | undefined;
        'aria-hidden'?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        'aria-modal'?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        role?: react_native.Role | react_native_reanimated.SharedValue<react_native.Role | undefined> | undefined;
        accessibilityLabelledBy?: string | string[] | react_native_reanimated.SharedValue<string | string[] | undefined> | undefined;
        'aria-labelledby'?: string | react_native_reanimated.SharedValue<string | undefined> | undefined;
        accessibilityLiveRegion?: "none" | "polite" | "assertive" | react_native_reanimated.SharedValue<"none" | "polite" | "assertive" | undefined> | undefined;
        'aria-live'?: "polite" | "assertive" | "off" | react_native_reanimated.SharedValue<"polite" | "assertive" | "off" | undefined> | undefined;
        accessibilityElementsHidden?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        accessibilityViewIsModal?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        onAccessibilityEscape?: (() => void) | react_native_reanimated.SharedValue<(() => void) | undefined> | undefined;
        onAccessibilityTap?: (() => void) | react_native_reanimated.SharedValue<(() => void) | undefined> | undefined;
        onMagicTap?: (() => void) | react_native_reanimated.SharedValue<(() => void) | undefined> | undefined;
        accessibilityIgnoresInvertColors?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        accessibilityLanguage?: string | react_native_reanimated.SharedValue<string | undefined> | undefined;
        accessibilityShowsLargeContentViewer?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        accessibilityLargeContentTitle?: string | react_native_reanimated.SharedValue<string | undefined> | undefined;
    } & {
        style?: react_native.StyleProp<react_native_reanimated.AnimatedStyle<react_native.StyleProp<react_native.ViewStyle>>>;
    } & {
        layout?: react_native_reanimated.BaseAnimationBuilder | react_native_reanimated.LayoutAnimationFunction | typeof react_native_reanimated.BaseAnimationBuilder;
        entering?: react_native_reanimated.BaseAnimationBuilder | typeof react_native_reanimated.BaseAnimationBuilder | react_native_reanimated.EntryExitAnimationFunction | react_native_reanimated_lib_typescript_layoutReanimation_animationBuilder_Keyframe.ReanimatedKeyframe;
        exiting?: react_native_reanimated.BaseAnimationBuilder | typeof react_native_reanimated.BaseAnimationBuilder | react_native_reanimated.EntryExitAnimationFunction | react_native_reanimated_lib_typescript_layoutReanimation_animationBuilder_Keyframe.ReanimatedKeyframe;
    } & {
        sharedTransitionTag?: string;
        sharedTransitionStyle?: react_native_reanimated.SharedTransition;
    } & {
        animatedProps?: Partial<{
            children?: react.ReactNode | react_native_reanimated.SharedValue<react.ReactNode>;
            hitSlop?: number | react_native.Insets | react_native_reanimated.SharedValue<number | react_native.Insets | null | undefined> | null | undefined;
            id?: string | react_native_reanimated.SharedValue<string | undefined> | undefined;
            needsOffscreenAlphaCompositing?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            onLayout?: ((event: react_native.LayoutChangeEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.LayoutChangeEvent) => void) | undefined> | undefined;
            pointerEvents?: "auto" | "none" | "box-none" | "box-only" | react_native_reanimated.SharedValue<"auto" | "none" | "box-none" | "box-only" | undefined> | undefined;
            removeClippedSubviews?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            testID?: string | react_native_reanimated.SharedValue<string | undefined> | undefined;
            nativeID?: string | react_native_reanimated.SharedValue<string | undefined> | undefined;
            collapsable?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            collapsableChildren?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            renderToHardwareTextureAndroid?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            focusable?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            tabIndex?: 0 | -1 | react_native_reanimated.SharedValue<0 | -1 | undefined> | undefined;
            shouldRasterizeIOS?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            isTVSelectable?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            hasTVPreferredFocus?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            tvParallaxShiftDistanceX?: number | react_native_reanimated.SharedValue<number | undefined> | undefined;
            tvParallaxShiftDistanceY?: number | react_native_reanimated.SharedValue<number | undefined> | undefined;
            tvParallaxTiltAngle?: number | react_native_reanimated.SharedValue<number | undefined> | undefined;
            tvParallaxMagnification?: number | react_native_reanimated.SharedValue<number | undefined> | undefined;
            onStartShouldSetResponder?: ((event: react_native.GestureResponderEvent) => boolean) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => boolean) | undefined> | undefined;
            onMoveShouldSetResponder?: ((event: react_native.GestureResponderEvent) => boolean) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => boolean) | undefined> | undefined;
            onResponderEnd?: ((event: react_native.GestureResponderEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => void) | undefined> | undefined;
            onResponderGrant?: ((event: react_native.GestureResponderEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => void) | undefined> | undefined;
            onResponderReject?: ((event: react_native.GestureResponderEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => void) | undefined> | undefined;
            onResponderMove?: ((event: react_native.GestureResponderEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => void) | undefined> | undefined;
            onResponderRelease?: ((event: react_native.GestureResponderEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => void) | undefined> | undefined;
            onResponderStart?: ((event: react_native.GestureResponderEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => void) | undefined> | undefined;
            onResponderTerminationRequest?: ((event: react_native.GestureResponderEvent) => boolean) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => boolean) | undefined> | undefined;
            onResponderTerminate?: ((event: react_native.GestureResponderEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => void) | undefined> | undefined;
            onStartShouldSetResponderCapture?: ((event: react_native.GestureResponderEvent) => boolean) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => boolean) | undefined> | undefined;
            onMoveShouldSetResponderCapture?: ((event: react_native.GestureResponderEvent) => boolean) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => boolean) | undefined> | undefined;
            onTouchStart?: ((event: react_native.GestureResponderEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => void) | undefined> | undefined;
            onTouchMove?: ((event: react_native.GestureResponderEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => void) | undefined> | undefined;
            onTouchEnd?: ((event: react_native.GestureResponderEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => void) | undefined> | undefined;
            onTouchCancel?: ((event: react_native.GestureResponderEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => void) | undefined> | undefined;
            onTouchEndCapture?: ((event: react_native.GestureResponderEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => void) | undefined> | undefined;
            onPointerEnter?: ((event: react_native.PointerEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.PointerEvent) => void) | undefined> | undefined;
            onPointerEnterCapture?: ((event: react_native.PointerEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.PointerEvent) => void) | undefined> | undefined;
            onPointerLeave?: ((event: react_native.PointerEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.PointerEvent) => void) | undefined> | undefined;
            onPointerLeaveCapture?: ((event: react_native.PointerEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.PointerEvent) => void) | undefined> | undefined;
            onPointerMove?: ((event: react_native.PointerEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.PointerEvent) => void) | undefined> | undefined;
            onPointerMoveCapture?: ((event: react_native.PointerEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.PointerEvent) => void) | undefined> | undefined;
            onPointerCancel?: ((event: react_native.PointerEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.PointerEvent) => void) | undefined> | undefined;
            onPointerCancelCapture?: ((event: react_native.PointerEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.PointerEvent) => void) | undefined> | undefined;
            onPointerDown?: ((event: react_native.PointerEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.PointerEvent) => void) | undefined> | undefined;
            onPointerDownCapture?: ((event: react_native.PointerEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.PointerEvent) => void) | undefined> | undefined;
            onPointerUp?: ((event: react_native.PointerEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.PointerEvent) => void) | undefined> | undefined;
            onPointerUpCapture?: ((event: react_native.PointerEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.PointerEvent) => void) | undefined> | undefined;
            accessible?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            accessibilityActions?: readonly Readonly<{
                name: react_native.AccessibilityActionName | string;
                label?: string | undefined;
            }>[] | react_native_reanimated.SharedValue<readonly Readonly<{
                name: react_native.AccessibilityActionName | string;
                label?: string | undefined;
            }>[] | undefined> | undefined;
            accessibilityLabel?: string | react_native_reanimated.SharedValue<string | undefined> | undefined;
            'aria-label'?: string | react_native_reanimated.SharedValue<string | undefined> | undefined;
            accessibilityRole?: react_native.AccessibilityRole | react_native_reanimated.SharedValue<react_native.AccessibilityRole | undefined> | undefined;
            accessibilityState?: react_native.AccessibilityState | react_native_reanimated.SharedValue<react_native.AccessibilityState | undefined> | undefined;
            'aria-busy'?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            'aria-checked'?: boolean | "mixed" | react_native_reanimated.SharedValue<boolean | "mixed" | undefined> | undefined;
            'aria-disabled'?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            'aria-expanded'?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            'aria-selected'?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            accessibilityHint?: string | react_native_reanimated.SharedValue<string | undefined> | undefined;
            accessibilityValue?: react_native.AccessibilityValue | react_native_reanimated.SharedValue<react_native.AccessibilityValue | undefined> | undefined;
            'aria-valuemax'?: number | react_native_reanimated.SharedValue<number | undefined> | undefined;
            'aria-valuemin'?: number | react_native_reanimated.SharedValue<number | undefined> | undefined;
            'aria-valuenow'?: number | react_native_reanimated.SharedValue<number | undefined> | undefined;
            'aria-valuetext'?: string | react_native_reanimated.SharedValue<string | undefined> | undefined;
            onAccessibilityAction?: ((event: react_native.AccessibilityActionEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.AccessibilityActionEvent) => void) | undefined> | undefined;
            importantForAccessibility?: "auto" | "yes" | "no" | "no-hide-descendants" | react_native_reanimated.SharedValue<"auto" | "yes" | "no" | "no-hide-descendants" | undefined> | undefined;
            'aria-hidden'?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            'aria-modal'?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            role?: react_native.Role | react_native_reanimated.SharedValue<react_native.Role | undefined> | undefined;
            accessibilityLabelledBy?: string | string[] | react_native_reanimated.SharedValue<string | string[] | undefined> | undefined;
            'aria-labelledby'?: string | react_native_reanimated.SharedValue<string | undefined> | undefined;
            accessibilityLiveRegion?: "none" | "polite" | "assertive" | react_native_reanimated.SharedValue<"none" | "polite" | "assertive" | undefined> | undefined;
            'aria-live'?: "polite" | "assertive" | "off" | react_native_reanimated.SharedValue<"polite" | "assertive" | "off" | undefined> | undefined;
            accessibilityElementsHidden?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            accessibilityViewIsModal?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            onAccessibilityEscape?: (() => void) | react_native_reanimated.SharedValue<(() => void) | undefined> | undefined;
            onAccessibilityTap?: (() => void) | react_native_reanimated.SharedValue<(() => void) | undefined> | undefined;
            onMagicTap?: (() => void) | react_native_reanimated.SharedValue<(() => void) | undefined> | undefined;
            accessibilityIgnoresInvertColors?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            accessibilityLanguage?: string | react_native_reanimated.SharedValue<string | undefined> | undefined;
            accessibilityShowsLargeContentViewer?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            accessibilityLargeContentTitle?: string | react_native_reanimated.SharedValue<string | undefined> | undefined;
        } & {
            style?: react_native.StyleProp<react_native_reanimated.AnimatedStyle<react_native.StyleProp<react_native.ViewStyle>>>;
        } & {
            layout?: react_native_reanimated.BaseAnimationBuilder | react_native_reanimated.LayoutAnimationFunction | typeof react_native_reanimated.BaseAnimationBuilder;
            entering?: react_native_reanimated.BaseAnimationBuilder | typeof react_native_reanimated.BaseAnimationBuilder | react_native_reanimated.EntryExitAnimationFunction | react_native_reanimated_lib_typescript_layoutReanimation_animationBuilder_Keyframe.ReanimatedKeyframe;
            exiting?: react_native_reanimated.BaseAnimationBuilder | typeof react_native_reanimated.BaseAnimationBuilder | react_native_reanimated.EntryExitAnimationFunction | react_native_reanimated_lib_typescript_layoutReanimation_animationBuilder_Keyframe.ReanimatedKeyframe;
        } & {
            sharedTransitionTag?: string;
            sharedTransitionStyle?: react_native_reanimated.SharedTransition;
        }> | undefined;
    } & react.RefAttributes<never>>>;
    Pressable: react.MemoExoticComponent<react.ForwardRefExoticComponent<{
        children?: react.ReactNode | ((state: react_native.PressableStateCallbackType) => React.ReactNode) | react_native_reanimated.SharedValue<react.ReactNode | ((state: react_native.PressableStateCallbackType) => React.ReactNode)>;
        hitSlop?: number | react_native.Insets | react_native_reanimated.SharedValue<number | react_native.Insets | null | undefined> | null | undefined;
        id?: string | react_native_reanimated.SharedValue<string | undefined> | undefined;
        needsOffscreenAlphaCompositing?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        onLayout?: ((event: react_native.LayoutChangeEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.LayoutChangeEvent) => void) | undefined> | undefined;
        pointerEvents?: "auto" | "none" | "box-none" | "box-only" | react_native_reanimated.SharedValue<"auto" | "none" | "box-none" | "box-only" | undefined> | undefined;
        removeClippedSubviews?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        testID?: string | react_native_reanimated.SharedValue<string | undefined> | undefined;
        nativeID?: string | react_native_reanimated.SharedValue<string | undefined> | undefined;
        collapsable?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        collapsableChildren?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        renderToHardwareTextureAndroid?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        focusable?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        tabIndex?: 0 | -1 | react_native_reanimated.SharedValue<0 | -1 | undefined> | undefined;
        shouldRasterizeIOS?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        isTVSelectable?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        hasTVPreferredFocus?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        tvParallaxShiftDistanceX?: number | react_native_reanimated.SharedValue<number | undefined> | undefined;
        tvParallaxShiftDistanceY?: number | react_native_reanimated.SharedValue<number | undefined> | undefined;
        tvParallaxTiltAngle?: number | react_native_reanimated.SharedValue<number | undefined> | undefined;
        tvParallaxMagnification?: number | react_native_reanimated.SharedValue<number | undefined> | undefined;
        onStartShouldSetResponder?: ((event: react_native.GestureResponderEvent) => boolean) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => boolean) | undefined> | undefined;
        onMoveShouldSetResponder?: ((event: react_native.GestureResponderEvent) => boolean) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => boolean) | undefined> | undefined;
        onResponderEnd?: ((event: react_native.GestureResponderEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => void) | undefined> | undefined;
        onResponderGrant?: ((event: react_native.GestureResponderEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => void) | undefined> | undefined;
        onResponderReject?: ((event: react_native.GestureResponderEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => void) | undefined> | undefined;
        onResponderMove?: ((event: react_native.GestureResponderEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => void) | undefined> | undefined;
        onResponderRelease?: ((event: react_native.GestureResponderEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => void) | undefined> | undefined;
        onResponderStart?: ((event: react_native.GestureResponderEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => void) | undefined> | undefined;
        onResponderTerminationRequest?: ((event: react_native.GestureResponderEvent) => boolean) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => boolean) | undefined> | undefined;
        onResponderTerminate?: ((event: react_native.GestureResponderEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => void) | undefined> | undefined;
        onStartShouldSetResponderCapture?: ((event: react_native.GestureResponderEvent) => boolean) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => boolean) | undefined> | undefined;
        onMoveShouldSetResponderCapture?: ((event: react_native.GestureResponderEvent) => boolean) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => boolean) | undefined> | undefined;
        onTouchStart?: ((event: react_native.GestureResponderEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => void) | undefined> | undefined;
        onTouchMove?: ((event: react_native.GestureResponderEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => void) | undefined> | undefined;
        onTouchEnd?: ((event: react_native.GestureResponderEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => void) | undefined> | undefined;
        onTouchCancel?: ((event: react_native.GestureResponderEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => void) | undefined> | undefined;
        onTouchEndCapture?: ((event: react_native.GestureResponderEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => void) | undefined> | undefined;
        onPointerEnter?: ((event: react_native.PointerEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.PointerEvent) => void) | undefined> | undefined;
        onPointerEnterCapture?: ((event: react_native.PointerEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.PointerEvent) => void) | undefined> | undefined;
        onPointerLeave?: ((event: react_native.PointerEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.PointerEvent) => void) | undefined> | undefined;
        onPointerLeaveCapture?: ((event: react_native.PointerEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.PointerEvent) => void) | undefined> | undefined;
        onPointerMove?: ((event: react_native.PointerEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.PointerEvent) => void) | undefined> | undefined;
        onPointerMoveCapture?: ((event: react_native.PointerEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.PointerEvent) => void) | undefined> | undefined;
        onPointerCancel?: ((event: react_native.PointerEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.PointerEvent) => void) | undefined> | undefined;
        onPointerCancelCapture?: ((event: react_native.PointerEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.PointerEvent) => void) | undefined> | undefined;
        onPointerDown?: ((event: react_native.PointerEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.PointerEvent) => void) | undefined> | undefined;
        onPointerDownCapture?: ((event: react_native.PointerEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.PointerEvent) => void) | undefined> | undefined;
        onPointerUp?: ((event: react_native.PointerEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.PointerEvent) => void) | undefined> | undefined;
        onPointerUpCapture?: ((event: react_native.PointerEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.PointerEvent) => void) | undefined> | undefined;
        accessible?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        accessibilityActions?: readonly Readonly<{
            name: react_native.AccessibilityActionName | string;
            label?: string | undefined;
        }>[] | react_native_reanimated.SharedValue<readonly Readonly<{
            name: react_native.AccessibilityActionName | string;
            label?: string | undefined;
        }>[] | undefined> | undefined;
        accessibilityLabel?: string | react_native_reanimated.SharedValue<string | undefined> | undefined;
        'aria-label'?: string | react_native_reanimated.SharedValue<string | undefined> | undefined;
        accessibilityRole?: react_native.AccessibilityRole | react_native_reanimated.SharedValue<react_native.AccessibilityRole | undefined> | undefined;
        accessibilityState?: react_native.AccessibilityState | react_native_reanimated.SharedValue<react_native.AccessibilityState | undefined> | undefined;
        'aria-busy'?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        'aria-checked'?: boolean | "mixed" | react_native_reanimated.SharedValue<boolean | "mixed" | undefined> | undefined;
        'aria-disabled'?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        'aria-expanded'?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        'aria-selected'?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        accessibilityHint?: string | react_native_reanimated.SharedValue<string | undefined> | undefined;
        accessibilityValue?: react_native.AccessibilityValue | react_native_reanimated.SharedValue<react_native.AccessibilityValue | undefined> | undefined;
        'aria-valuemax'?: number | react_native_reanimated.SharedValue<number | undefined> | undefined;
        'aria-valuemin'?: number | react_native_reanimated.SharedValue<number | undefined> | undefined;
        'aria-valuenow'?: number | react_native_reanimated.SharedValue<number | undefined> | undefined;
        'aria-valuetext'?: string | react_native_reanimated.SharedValue<string | undefined> | undefined;
        onAccessibilityAction?: ((event: react_native.AccessibilityActionEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.AccessibilityActionEvent) => void) | undefined> | undefined;
        importantForAccessibility?: "auto" | "yes" | "no" | "no-hide-descendants" | react_native_reanimated.SharedValue<"auto" | "yes" | "no" | "no-hide-descendants" | undefined> | undefined;
        'aria-hidden'?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        'aria-modal'?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        role?: react_native.Role | react_native_reanimated.SharedValue<react_native.Role | undefined> | undefined;
        accessibilityLabelledBy?: string | string[] | react_native_reanimated.SharedValue<string | string[] | undefined> | undefined;
        'aria-labelledby'?: string | react_native_reanimated.SharedValue<string | undefined> | undefined;
        accessibilityLiveRegion?: "none" | "polite" | "assertive" | react_native_reanimated.SharedValue<"none" | "polite" | "assertive" | undefined> | undefined;
        'aria-live'?: "polite" | "assertive" | "off" | react_native_reanimated.SharedValue<"polite" | "assertive" | "off" | undefined> | undefined;
        accessibilityElementsHidden?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        accessibilityViewIsModal?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        onAccessibilityEscape?: (() => void) | react_native_reanimated.SharedValue<(() => void) | undefined> | undefined;
        onAccessibilityTap?: (() => void) | react_native_reanimated.SharedValue<(() => void) | undefined> | undefined;
        onMagicTap?: (() => void) | react_native_reanimated.SharedValue<(() => void) | undefined> | undefined;
        accessibilityIgnoresInvertColors?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        accessibilityLanguage?: string | react_native_reanimated.SharedValue<string | undefined> | undefined;
        accessibilityShowsLargeContentViewer?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        accessibilityLargeContentTitle?: string | react_native_reanimated.SharedValue<string | undefined> | undefined;
        ref?: react.Ref<View> | react_native_reanimated.SharedValue<react.Ref<View> | undefined> | undefined;
        key?: react.Key | react_native_reanimated.SharedValue<react.Key | null | undefined> | null | undefined;
        onHoverIn?: ((event: react_native.MouseEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.MouseEvent) => void) | null | undefined> | null | undefined;
        onHoverOut?: ((event: react_native.MouseEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.MouseEvent) => void) | null | undefined> | null | undefined;
        onPress?: ((event: react_native.GestureResponderEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => void) | null | undefined> | null | undefined;
        onPressIn?: ((event: react_native.GestureResponderEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => void) | null | undefined> | null | undefined;
        onPressOut?: ((event: react_native.GestureResponderEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => void) | null | undefined> | null | undefined;
        onLongPress?: ((event: react_native.GestureResponderEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => void) | null | undefined> | null | undefined;
        onBlur?: ((event: react_native.NativeSyntheticEvent<react_native.TargetedEvent>) => void) | react_native_reanimated.SharedValue<((event: react_native.NativeSyntheticEvent<react_native.TargetedEvent>) => void) | null | undefined> | null | undefined;
        onFocus?: ((event: react_native.NativeSyntheticEvent<react_native.TargetedEvent>) => void) | react_native_reanimated.SharedValue<((event: react_native.NativeSyntheticEvent<react_native.TargetedEvent>) => void) | null | undefined> | null | undefined;
        cancelable?: boolean | react_native_reanimated.SharedValue<boolean | null | undefined> | null | undefined;
        delayHoverIn?: number | react_native_reanimated.SharedValue<number | null | undefined> | null | undefined;
        delayHoverOut?: number | react_native_reanimated.SharedValue<number | null | undefined> | null | undefined;
        delayLongPress?: number | react_native_reanimated.SharedValue<number | null | undefined> | null | undefined;
        disabled?: boolean | react_native_reanimated.SharedValue<boolean | null | undefined> | null | undefined;
        pressRetentionOffset?: number | react_native.Insets | react_native_reanimated.SharedValue<number | react_native.Insets | null | undefined> | null | undefined;
        android_disableSound?: boolean | react_native_reanimated.SharedValue<boolean | null | undefined> | null | undefined;
        android_ripple?: react_native.PressableAndroidRippleConfig | react_native_reanimated.SharedValue<react_native.PressableAndroidRippleConfig | null | undefined> | null | undefined;
        testOnly_pressed?: boolean | react_native_reanimated.SharedValue<boolean | null | undefined> | null | undefined;
        unstable_pressDelay?: number | react_native_reanimated.SharedValue<number | undefined> | undefined;
    } & {
        style?: react_native.StyleProp<react_native_reanimated.AnimatedStyle<react_native.StyleProp<react_native.ViewStyle> | ((state: react_native.PressableStateCallbackType) => react_native.StyleProp<react_native.ViewStyle>)>>;
    } & {
        layout?: react_native_reanimated.BaseAnimationBuilder | react_native_reanimated.LayoutAnimationFunction | typeof react_native_reanimated.BaseAnimationBuilder;
        entering?: react_native_reanimated.BaseAnimationBuilder | typeof react_native_reanimated.BaseAnimationBuilder | react_native_reanimated.EntryExitAnimationFunction | react_native_reanimated_lib_typescript_layoutReanimation_animationBuilder_Keyframe.ReanimatedKeyframe;
        exiting?: react_native_reanimated.BaseAnimationBuilder | typeof react_native_reanimated.BaseAnimationBuilder | react_native_reanimated.EntryExitAnimationFunction | react_native_reanimated_lib_typescript_layoutReanimation_animationBuilder_Keyframe.ReanimatedKeyframe;
    } & {
        sharedTransitionTag?: string;
        sharedTransitionStyle?: react_native_reanimated.SharedTransition;
    } & {
        animatedProps?: Partial<{
            children?: react.ReactNode | ((state: react_native.PressableStateCallbackType) => React.ReactNode) | react_native_reanimated.SharedValue<react.ReactNode | ((state: react_native.PressableStateCallbackType) => React.ReactNode)>;
            hitSlop?: number | react_native.Insets | react_native_reanimated.SharedValue<number | react_native.Insets | null | undefined> | null | undefined;
            id?: string | react_native_reanimated.SharedValue<string | undefined> | undefined;
            needsOffscreenAlphaCompositing?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            onLayout?: ((event: react_native.LayoutChangeEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.LayoutChangeEvent) => void) | undefined> | undefined;
            pointerEvents?: "auto" | "none" | "box-none" | "box-only" | react_native_reanimated.SharedValue<"auto" | "none" | "box-none" | "box-only" | undefined> | undefined;
            removeClippedSubviews?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            testID?: string | react_native_reanimated.SharedValue<string | undefined> | undefined;
            nativeID?: string | react_native_reanimated.SharedValue<string | undefined> | undefined;
            collapsable?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            collapsableChildren?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            renderToHardwareTextureAndroid?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            focusable?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            tabIndex?: 0 | -1 | react_native_reanimated.SharedValue<0 | -1 | undefined> | undefined;
            shouldRasterizeIOS?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            isTVSelectable?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            hasTVPreferredFocus?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            tvParallaxShiftDistanceX?: number | react_native_reanimated.SharedValue<number | undefined> | undefined;
            tvParallaxShiftDistanceY?: number | react_native_reanimated.SharedValue<number | undefined> | undefined;
            tvParallaxTiltAngle?: number | react_native_reanimated.SharedValue<number | undefined> | undefined;
            tvParallaxMagnification?: number | react_native_reanimated.SharedValue<number | undefined> | undefined;
            onStartShouldSetResponder?: ((event: react_native.GestureResponderEvent) => boolean) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => boolean) | undefined> | undefined;
            onMoveShouldSetResponder?: ((event: react_native.GestureResponderEvent) => boolean) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => boolean) | undefined> | undefined;
            onResponderEnd?: ((event: react_native.GestureResponderEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => void) | undefined> | undefined;
            onResponderGrant?: ((event: react_native.GestureResponderEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => void) | undefined> | undefined;
            onResponderReject?: ((event: react_native.GestureResponderEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => void) | undefined> | undefined;
            onResponderMove?: ((event: react_native.GestureResponderEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => void) | undefined> | undefined;
            onResponderRelease?: ((event: react_native.GestureResponderEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => void) | undefined> | undefined;
            onResponderStart?: ((event: react_native.GestureResponderEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => void) | undefined> | undefined;
            onResponderTerminationRequest?: ((event: react_native.GestureResponderEvent) => boolean) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => boolean) | undefined> | undefined;
            onResponderTerminate?: ((event: react_native.GestureResponderEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => void) | undefined> | undefined;
            onStartShouldSetResponderCapture?: ((event: react_native.GestureResponderEvent) => boolean) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => boolean) | undefined> | undefined;
            onMoveShouldSetResponderCapture?: ((event: react_native.GestureResponderEvent) => boolean) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => boolean) | undefined> | undefined;
            onTouchStart?: ((event: react_native.GestureResponderEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => void) | undefined> | undefined;
            onTouchMove?: ((event: react_native.GestureResponderEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => void) | undefined> | undefined;
            onTouchEnd?: ((event: react_native.GestureResponderEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => void) | undefined> | undefined;
            onTouchCancel?: ((event: react_native.GestureResponderEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => void) | undefined> | undefined;
            onTouchEndCapture?: ((event: react_native.GestureResponderEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => void) | undefined> | undefined;
            onPointerEnter?: ((event: react_native.PointerEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.PointerEvent) => void) | undefined> | undefined;
            onPointerEnterCapture?: ((event: react_native.PointerEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.PointerEvent) => void) | undefined> | undefined;
            onPointerLeave?: ((event: react_native.PointerEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.PointerEvent) => void) | undefined> | undefined;
            onPointerLeaveCapture?: ((event: react_native.PointerEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.PointerEvent) => void) | undefined> | undefined;
            onPointerMove?: ((event: react_native.PointerEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.PointerEvent) => void) | undefined> | undefined;
            onPointerMoveCapture?: ((event: react_native.PointerEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.PointerEvent) => void) | undefined> | undefined;
            onPointerCancel?: ((event: react_native.PointerEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.PointerEvent) => void) | undefined> | undefined;
            onPointerCancelCapture?: ((event: react_native.PointerEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.PointerEvent) => void) | undefined> | undefined;
            onPointerDown?: ((event: react_native.PointerEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.PointerEvent) => void) | undefined> | undefined;
            onPointerDownCapture?: ((event: react_native.PointerEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.PointerEvent) => void) | undefined> | undefined;
            onPointerUp?: ((event: react_native.PointerEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.PointerEvent) => void) | undefined> | undefined;
            onPointerUpCapture?: ((event: react_native.PointerEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.PointerEvent) => void) | undefined> | undefined;
            accessible?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            accessibilityActions?: readonly Readonly<{
                name: react_native.AccessibilityActionName | string;
                label?: string | undefined;
            }>[] | react_native_reanimated.SharedValue<readonly Readonly<{
                name: react_native.AccessibilityActionName | string;
                label?: string | undefined;
            }>[] | undefined> | undefined;
            accessibilityLabel?: string | react_native_reanimated.SharedValue<string | undefined> | undefined;
            'aria-label'?: string | react_native_reanimated.SharedValue<string | undefined> | undefined;
            accessibilityRole?: react_native.AccessibilityRole | react_native_reanimated.SharedValue<react_native.AccessibilityRole | undefined> | undefined;
            accessibilityState?: react_native.AccessibilityState | react_native_reanimated.SharedValue<react_native.AccessibilityState | undefined> | undefined;
            'aria-busy'?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            'aria-checked'?: boolean | "mixed" | react_native_reanimated.SharedValue<boolean | "mixed" | undefined> | undefined;
            'aria-disabled'?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            'aria-expanded'?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            'aria-selected'?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            accessibilityHint?: string | react_native_reanimated.SharedValue<string | undefined> | undefined;
            accessibilityValue?: react_native.AccessibilityValue | react_native_reanimated.SharedValue<react_native.AccessibilityValue | undefined> | undefined;
            'aria-valuemax'?: number | react_native_reanimated.SharedValue<number | undefined> | undefined;
            'aria-valuemin'?: number | react_native_reanimated.SharedValue<number | undefined> | undefined;
            'aria-valuenow'?: number | react_native_reanimated.SharedValue<number | undefined> | undefined;
            'aria-valuetext'?: string | react_native_reanimated.SharedValue<string | undefined> | undefined;
            onAccessibilityAction?: ((event: react_native.AccessibilityActionEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.AccessibilityActionEvent) => void) | undefined> | undefined;
            importantForAccessibility?: "auto" | "yes" | "no" | "no-hide-descendants" | react_native_reanimated.SharedValue<"auto" | "yes" | "no" | "no-hide-descendants" | undefined> | undefined;
            'aria-hidden'?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            'aria-modal'?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            role?: react_native.Role | react_native_reanimated.SharedValue<react_native.Role | undefined> | undefined;
            accessibilityLabelledBy?: string | string[] | react_native_reanimated.SharedValue<string | string[] | undefined> | undefined;
            'aria-labelledby'?: string | react_native_reanimated.SharedValue<string | undefined> | undefined;
            accessibilityLiveRegion?: "none" | "polite" | "assertive" | react_native_reanimated.SharedValue<"none" | "polite" | "assertive" | undefined> | undefined;
            'aria-live'?: "polite" | "assertive" | "off" | react_native_reanimated.SharedValue<"polite" | "assertive" | "off" | undefined> | undefined;
            accessibilityElementsHidden?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            accessibilityViewIsModal?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            onAccessibilityEscape?: (() => void) | react_native_reanimated.SharedValue<(() => void) | undefined> | undefined;
            onAccessibilityTap?: (() => void) | react_native_reanimated.SharedValue<(() => void) | undefined> | undefined;
            onMagicTap?: (() => void) | react_native_reanimated.SharedValue<(() => void) | undefined> | undefined;
            accessibilityIgnoresInvertColors?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            accessibilityLanguage?: string | react_native_reanimated.SharedValue<string | undefined> | undefined;
            accessibilityShowsLargeContentViewer?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            accessibilityLargeContentTitle?: string | react_native_reanimated.SharedValue<string | undefined> | undefined;
            ref?: react.Ref<View> | react_native_reanimated.SharedValue<react.Ref<View> | undefined> | undefined;
            key?: react.Key | react_native_reanimated.SharedValue<react.Key | null | undefined> | null | undefined;
            onHoverIn?: ((event: react_native.MouseEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.MouseEvent) => void) | null | undefined> | null | undefined;
            onHoverOut?: ((event: react_native.MouseEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.MouseEvent) => void) | null | undefined> | null | undefined;
            onPress?: ((event: react_native.GestureResponderEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => void) | null | undefined> | null | undefined;
            onPressIn?: ((event: react_native.GestureResponderEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => void) | null | undefined> | null | undefined;
            onPressOut?: ((event: react_native.GestureResponderEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => void) | null | undefined> | null | undefined;
            onLongPress?: ((event: react_native.GestureResponderEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => void) | null | undefined> | null | undefined;
            onBlur?: ((event: react_native.NativeSyntheticEvent<react_native.TargetedEvent>) => void) | react_native_reanimated.SharedValue<((event: react_native.NativeSyntheticEvent<react_native.TargetedEvent>) => void) | null | undefined> | null | undefined;
            onFocus?: ((event: react_native.NativeSyntheticEvent<react_native.TargetedEvent>) => void) | react_native_reanimated.SharedValue<((event: react_native.NativeSyntheticEvent<react_native.TargetedEvent>) => void) | null | undefined> | null | undefined;
            cancelable?: boolean | react_native_reanimated.SharedValue<boolean | null | undefined> | null | undefined;
            delayHoverIn?: number | react_native_reanimated.SharedValue<number | null | undefined> | null | undefined;
            delayHoverOut?: number | react_native_reanimated.SharedValue<number | null | undefined> | null | undefined;
            delayLongPress?: number | react_native_reanimated.SharedValue<number | null | undefined> | null | undefined;
            disabled?: boolean | react_native_reanimated.SharedValue<boolean | null | undefined> | null | undefined;
            pressRetentionOffset?: number | react_native.Insets | react_native_reanimated.SharedValue<number | react_native.Insets | null | undefined> | null | undefined;
            android_disableSound?: boolean | react_native_reanimated.SharedValue<boolean | null | undefined> | null | undefined;
            android_ripple?: react_native.PressableAndroidRippleConfig | react_native_reanimated.SharedValue<react_native.PressableAndroidRippleConfig | null | undefined> | null | undefined;
            testOnly_pressed?: boolean | react_native_reanimated.SharedValue<boolean | null | undefined> | null | undefined;
            unstable_pressDelay?: number | react_native_reanimated.SharedValue<number | undefined> | undefined;
        } & {
            style?: react_native.StyleProp<react_native_reanimated.AnimatedStyle<react_native.StyleProp<react_native.ViewStyle> | ((state: react_native.PressableStateCallbackType) => react_native.StyleProp<react_native.ViewStyle>)>>;
        } & {
            layout?: react_native_reanimated.BaseAnimationBuilder | react_native_reanimated.LayoutAnimationFunction | typeof react_native_reanimated.BaseAnimationBuilder;
            entering?: react_native_reanimated.BaseAnimationBuilder | typeof react_native_reanimated.BaseAnimationBuilder | react_native_reanimated.EntryExitAnimationFunction | react_native_reanimated_lib_typescript_layoutReanimation_animationBuilder_Keyframe.ReanimatedKeyframe;
            exiting?: react_native_reanimated.BaseAnimationBuilder | typeof react_native_reanimated.BaseAnimationBuilder | react_native_reanimated.EntryExitAnimationFunction | react_native_reanimated_lib_typescript_layoutReanimation_animationBuilder_Keyframe.ReanimatedKeyframe;
        } & {
            sharedTransitionTag?: string;
            sharedTransitionStyle?: react_native_reanimated.SharedTransition;
        }> | undefined;
    } & react.RefAttributes<View | react.Component<react_native.PressableProps & react.RefAttributes<View>, any, any>>>>;
    ScrollView: react.MemoExoticComponent<react.ForwardRefExoticComponent<{
        children?: react.ReactNode | react_native_reanimated.SharedValue<react.ReactNode>;
        hitSlop?: number | react_native.Insets | react_native_reanimated.SharedValue<number | react_native.Insets | null | undefined> | null | undefined;
        id?: string | react_native_reanimated.SharedValue<string | undefined> | undefined;
        needsOffscreenAlphaCompositing?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        onLayout?: ((event: react_native.LayoutChangeEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.LayoutChangeEvent) => void) | undefined> | undefined;
        pointerEvents?: "auto" | "none" | "box-none" | "box-only" | react_native_reanimated.SharedValue<"auto" | "none" | "box-none" | "box-only" | undefined> | undefined;
        removeClippedSubviews?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        testID?: string | react_native_reanimated.SharedValue<string | undefined> | undefined;
        nativeID?: string | react_native_reanimated.SharedValue<string | undefined> | undefined;
        collapsable?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        collapsableChildren?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        renderToHardwareTextureAndroid?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        focusable?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        tabIndex?: 0 | -1 | react_native_reanimated.SharedValue<0 | -1 | undefined> | undefined;
        shouldRasterizeIOS?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        isTVSelectable?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        hasTVPreferredFocus?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        tvParallaxShiftDistanceX?: number | react_native_reanimated.SharedValue<number | undefined> | undefined;
        tvParallaxShiftDistanceY?: number | react_native_reanimated.SharedValue<number | undefined> | undefined;
        tvParallaxTiltAngle?: number | react_native_reanimated.SharedValue<number | undefined> | undefined;
        tvParallaxMagnification?: number | react_native_reanimated.SharedValue<number | undefined> | undefined;
        onStartShouldSetResponder?: ((event: react_native.GestureResponderEvent) => boolean) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => boolean) | undefined> | undefined;
        onMoveShouldSetResponder?: ((event: react_native.GestureResponderEvent) => boolean) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => boolean) | undefined> | undefined;
        onResponderEnd?: ((event: react_native.GestureResponderEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => void) | undefined> | undefined;
        onResponderGrant?: ((event: react_native.GestureResponderEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => void) | undefined> | undefined;
        onResponderReject?: ((event: react_native.GestureResponderEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => void) | undefined> | undefined;
        onResponderMove?: ((event: react_native.GestureResponderEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => void) | undefined> | undefined;
        onResponderRelease?: ((event: react_native.GestureResponderEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => void) | undefined> | undefined;
        onResponderStart?: ((event: react_native.GestureResponderEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => void) | undefined> | undefined;
        onResponderTerminationRequest?: ((event: react_native.GestureResponderEvent) => boolean) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => boolean) | undefined> | undefined;
        onResponderTerminate?: ((event: react_native.GestureResponderEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => void) | undefined> | undefined;
        onStartShouldSetResponderCapture?: ((event: react_native.GestureResponderEvent) => boolean) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => boolean) | undefined> | undefined;
        onMoveShouldSetResponderCapture?: ((event: react_native.GestureResponderEvent) => boolean) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => boolean) | undefined> | undefined;
        onTouchStart?: ((event: react_native.GestureResponderEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => void) | undefined> | undefined;
        onTouchMove?: ((event: react_native.GestureResponderEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => void) | undefined> | undefined;
        onTouchEnd?: ((event: react_native.GestureResponderEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => void) | undefined> | undefined;
        onTouchCancel?: ((event: react_native.GestureResponderEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => void) | undefined> | undefined;
        onTouchEndCapture?: ((event: react_native.GestureResponderEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => void) | undefined> | undefined;
        onPointerEnter?: ((event: react_native.PointerEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.PointerEvent) => void) | undefined> | undefined;
        onPointerEnterCapture?: ((event: react_native.PointerEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.PointerEvent) => void) | undefined> | undefined;
        onPointerLeave?: ((event: react_native.PointerEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.PointerEvent) => void) | undefined> | undefined;
        onPointerLeaveCapture?: ((event: react_native.PointerEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.PointerEvent) => void) | undefined> | undefined;
        onPointerMove?: ((event: react_native.PointerEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.PointerEvent) => void) | undefined> | undefined;
        onPointerMoveCapture?: ((event: react_native.PointerEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.PointerEvent) => void) | undefined> | undefined;
        onPointerCancel?: ((event: react_native.PointerEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.PointerEvent) => void) | undefined> | undefined;
        onPointerCancelCapture?: ((event: react_native.PointerEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.PointerEvent) => void) | undefined> | undefined;
        onPointerDown?: ((event: react_native.PointerEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.PointerEvent) => void) | undefined> | undefined;
        onPointerDownCapture?: ((event: react_native.PointerEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.PointerEvent) => void) | undefined> | undefined;
        onPointerUp?: ((event: react_native.PointerEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.PointerEvent) => void) | undefined> | undefined;
        onPointerUpCapture?: ((event: react_native.PointerEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.PointerEvent) => void) | undefined> | undefined;
        accessible?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        accessibilityActions?: readonly Readonly<{
            name: react_native.AccessibilityActionName | string;
            label?: string | undefined;
        }>[] | react_native_reanimated.SharedValue<readonly Readonly<{
            name: react_native.AccessibilityActionName | string;
            label?: string | undefined;
        }>[] | undefined> | undefined;
        accessibilityLabel?: string | react_native_reanimated.SharedValue<string | undefined> | undefined;
        'aria-label'?: string | react_native_reanimated.SharedValue<string | undefined> | undefined;
        accessibilityRole?: react_native.AccessibilityRole | react_native_reanimated.SharedValue<react_native.AccessibilityRole | undefined> | undefined;
        accessibilityState?: react_native.AccessibilityState | react_native_reanimated.SharedValue<react_native.AccessibilityState | undefined> | undefined;
        'aria-busy'?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        'aria-checked'?: boolean | "mixed" | react_native_reanimated.SharedValue<boolean | "mixed" | undefined> | undefined;
        'aria-disabled'?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        'aria-expanded'?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        'aria-selected'?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        accessibilityHint?: string | react_native_reanimated.SharedValue<string | undefined> | undefined;
        accessibilityValue?: react_native.AccessibilityValue | react_native_reanimated.SharedValue<react_native.AccessibilityValue | undefined> | undefined;
        'aria-valuemax'?: number | react_native_reanimated.SharedValue<number | undefined> | undefined;
        'aria-valuemin'?: number | react_native_reanimated.SharedValue<number | undefined> | undefined;
        'aria-valuenow'?: number | react_native_reanimated.SharedValue<number | undefined> | undefined;
        'aria-valuetext'?: string | react_native_reanimated.SharedValue<string | undefined> | undefined;
        onAccessibilityAction?: ((event: react_native.AccessibilityActionEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.AccessibilityActionEvent) => void) | undefined> | undefined;
        importantForAccessibility?: "auto" | "yes" | "no" | "no-hide-descendants" | react_native_reanimated.SharedValue<"auto" | "yes" | "no" | "no-hide-descendants" | undefined> | undefined;
        'aria-hidden'?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        'aria-modal'?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        role?: react_native.Role | react_native_reanimated.SharedValue<react_native.Role | undefined> | undefined;
        accessibilityLabelledBy?: string | string[] | react_native_reanimated.SharedValue<string | string[] | undefined> | undefined;
        'aria-labelledby'?: string | react_native_reanimated.SharedValue<string | undefined> | undefined;
        accessibilityLiveRegion?: "none" | "polite" | "assertive" | react_native_reanimated.SharedValue<"none" | "polite" | "assertive" | undefined> | undefined;
        'aria-live'?: "polite" | "assertive" | "off" | react_native_reanimated.SharedValue<"polite" | "assertive" | "off" | undefined> | undefined;
        accessibilityElementsHidden?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        accessibilityViewIsModal?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        onAccessibilityEscape?: (() => void) | react_native_reanimated.SharedValue<(() => void) | undefined> | undefined;
        onAccessibilityTap?: (() => void) | react_native_reanimated.SharedValue<(() => void) | undefined> | undefined;
        onMagicTap?: (() => void) | react_native_reanimated.SharedValue<(() => void) | undefined> | undefined;
        accessibilityIgnoresInvertColors?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        accessibilityLanguage?: string | react_native_reanimated.SharedValue<string | undefined> | undefined;
        accessibilityShowsLargeContentViewer?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        accessibilityLargeContentTitle?: string | react_native_reanimated.SharedValue<string | undefined> | undefined;
        decelerationRate?: number | "normal" | "fast" | react_native_reanimated.SharedValue<number | "normal" | "fast" | undefined> | undefined;
        horizontal?: boolean | react_native_reanimated.SharedValue<boolean | null | undefined> | null | undefined;
        invertStickyHeaders?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        keyboardDismissMode?: "none" | "interactive" | "on-drag" | react_native_reanimated.SharedValue<"none" | "interactive" | "on-drag" | undefined> | undefined;
        keyboardShouldPersistTaps?: boolean | "always" | "never" | "handled" | react_native_reanimated.SharedValue<boolean | "always" | "never" | "handled" | undefined> | undefined;
        onContentSizeChange?: ((w: number, h: number) => void) | react_native_reanimated.SharedValue<((w: number, h: number) => void) | undefined> | undefined;
        onScroll?: ((event: react_native.NativeSyntheticEvent<react_native.NativeScrollEvent>) => void) | react_native_reanimated.SharedValue<((event: react_native.NativeSyntheticEvent<react_native.NativeScrollEvent>) => void) | undefined> | undefined;
        onScrollBeginDrag?: ((event: react_native.NativeSyntheticEvent<react_native.NativeScrollEvent>) => void) | react_native_reanimated.SharedValue<((event: react_native.NativeSyntheticEvent<react_native.NativeScrollEvent>) => void) | undefined> | undefined;
        onScrollEndDrag?: ((event: react_native.NativeSyntheticEvent<react_native.NativeScrollEvent>) => void) | react_native_reanimated.SharedValue<((event: react_native.NativeSyntheticEvent<react_native.NativeScrollEvent>) => void) | undefined> | undefined;
        onMomentumScrollEnd?: ((event: react_native.NativeSyntheticEvent<react_native.NativeScrollEvent>) => void) | react_native_reanimated.SharedValue<((event: react_native.NativeSyntheticEvent<react_native.NativeScrollEvent>) => void) | undefined> | undefined;
        onMomentumScrollBegin?: ((event: react_native.NativeSyntheticEvent<react_native.NativeScrollEvent>) => void) | react_native_reanimated.SharedValue<((event: react_native.NativeSyntheticEvent<react_native.NativeScrollEvent>) => void) | undefined> | undefined;
        pagingEnabled?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        scrollEnabled?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        showsHorizontalScrollIndicator?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        showsVerticalScrollIndicator?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        stickyHeaderHiddenOnScroll?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        refreshControl?: react.ReactElement<react_native.RefreshControlProps, string | react.JSXElementConstructor<any>> | react_native_reanimated.SharedValue<react.ReactElement<react_native.RefreshControlProps, string | react.JSXElementConstructor<any>> | undefined> | undefined;
        snapToInterval?: number | react_native_reanimated.SharedValue<number | undefined> | undefined;
        snapToOffsets?: number[] | react_native_reanimated.SharedValue<number[] | undefined> | undefined;
        snapToStart?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        snapToEnd?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        stickyHeaderIndices?: number[] | react_native_reanimated.SharedValue<number[] | undefined> | undefined;
        disableIntervalMomentum?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        disableScrollViewPanResponder?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        StickyHeaderComponent?: react.ComponentType<any> | react_native_reanimated.SharedValue<react.ComponentType<any> | undefined> | undefined;
        alwaysBounceHorizontal?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        alwaysBounceVertical?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        automaticallyAdjustContentInsets?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        automaticallyAdjustKeyboardInsets?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        automaticallyAdjustsScrollIndicatorInsets?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        bounces?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        bouncesZoom?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        canCancelContentTouches?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        centerContent?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        contentInset?: react_native.Insets | react_native_reanimated.SharedValue<react_native.Insets | undefined> | undefined;
        contentOffset?: react_native.PointProp | react_native_reanimated.SharedValue<react_native.PointProp | undefined> | undefined;
        contentInsetAdjustmentBehavior?: "always" | "never" | "automatic" | "scrollableAxes" | react_native_reanimated.SharedValue<"always" | "never" | "automatic" | "scrollableAxes" | undefined> | undefined;
        directionalLockEnabled?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        maintainVisibleContentPosition?: {
            autoscrollToTopThreshold?: number | null | undefined;
            minIndexForVisible: number;
        } | react_native_reanimated.SharedValue<{
            autoscrollToTopThreshold?: number | null | undefined;
            minIndexForVisible: number;
        } | null | undefined> | null | undefined;
        maximumZoomScale?: number | react_native_reanimated.SharedValue<number | undefined> | undefined;
        minimumZoomScale?: number | react_native_reanimated.SharedValue<number | undefined> | undefined;
        onScrollAnimationEnd?: (() => void) | react_native_reanimated.SharedValue<(() => void) | undefined> | undefined;
        pinchGestureEnabled?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        scrollEventThrottle?: number | react_native_reanimated.SharedValue<number | undefined> | undefined;
        scrollIndicatorInsets?: react_native.Insets | react_native_reanimated.SharedValue<react_native.Insets | undefined> | undefined;
        scrollToOverflowEnabled?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        scrollsToTop?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        snapToAlignment?: "center" | "end" | "start" | react_native_reanimated.SharedValue<"center" | "end" | "start" | undefined> | undefined;
        onScrollToTop?: ((event: react_native.NativeSyntheticEvent<react_native.NativeScrollEvent>) => void) | react_native_reanimated.SharedValue<((event: react_native.NativeSyntheticEvent<react_native.NativeScrollEvent>) => void) | undefined> | undefined;
        zoomScale?: number | react_native_reanimated.SharedValue<number | undefined> | undefined;
        endFillColor?: react_native.ColorValue | react_native_reanimated.SharedValue<react_native.ColorValue | undefined> | undefined;
        scrollPerfTag?: string | react_native_reanimated.SharedValue<string | undefined> | undefined;
        overScrollMode?: "always" | "never" | "auto" | react_native_reanimated.SharedValue<"always" | "never" | "auto" | undefined> | undefined;
        nestedScrollEnabled?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        fadingEdgeLength?: number | react_native_reanimated.SharedValue<number | undefined> | undefined;
        persistentScrollbar?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
    } & {
        style?: react_native.StyleProp<react_native_reanimated.AnimatedStyle<react_native.StyleProp<react_native.ViewStyle>>>;
        contentContainerStyle?: react_native.StyleProp<react_native_reanimated.AnimatedStyle<react_native.StyleProp<react_native.ViewStyle>>>;
        indicatorStyle?: react_native.StyleProp<react_native_reanimated.AnimatedStyle<"default" | "black" | "white" | undefined>>;
    } & {
        layout?: react_native_reanimated.BaseAnimationBuilder | react_native_reanimated.LayoutAnimationFunction | typeof react_native_reanimated.BaseAnimationBuilder;
        entering?: react_native_reanimated.BaseAnimationBuilder | typeof react_native_reanimated.BaseAnimationBuilder | react_native_reanimated.EntryExitAnimationFunction | react_native_reanimated_lib_typescript_layoutReanimation_animationBuilder_Keyframe.ReanimatedKeyframe;
        exiting?: react_native_reanimated.BaseAnimationBuilder | typeof react_native_reanimated.BaseAnimationBuilder | react_native_reanimated.EntryExitAnimationFunction | react_native_reanimated_lib_typescript_layoutReanimation_animationBuilder_Keyframe.ReanimatedKeyframe;
    } & {
        sharedTransitionTag?: string;
        sharedTransitionStyle?: react_native_reanimated.SharedTransition;
    } & {
        animatedProps?: Partial<{
            children?: react.ReactNode | react_native_reanimated.SharedValue<react.ReactNode>;
            hitSlop?: number | react_native.Insets | react_native_reanimated.SharedValue<number | react_native.Insets | null | undefined> | null | undefined;
            id?: string | react_native_reanimated.SharedValue<string | undefined> | undefined;
            needsOffscreenAlphaCompositing?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            onLayout?: ((event: react_native.LayoutChangeEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.LayoutChangeEvent) => void) | undefined> | undefined;
            pointerEvents?: "auto" | "none" | "box-none" | "box-only" | react_native_reanimated.SharedValue<"auto" | "none" | "box-none" | "box-only" | undefined> | undefined;
            removeClippedSubviews?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            testID?: string | react_native_reanimated.SharedValue<string | undefined> | undefined;
            nativeID?: string | react_native_reanimated.SharedValue<string | undefined> | undefined;
            collapsable?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            collapsableChildren?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            renderToHardwareTextureAndroid?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            focusable?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            tabIndex?: 0 | -1 | react_native_reanimated.SharedValue<0 | -1 | undefined> | undefined;
            shouldRasterizeIOS?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            isTVSelectable?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            hasTVPreferredFocus?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            tvParallaxShiftDistanceX?: number | react_native_reanimated.SharedValue<number | undefined> | undefined;
            tvParallaxShiftDistanceY?: number | react_native_reanimated.SharedValue<number | undefined> | undefined;
            tvParallaxTiltAngle?: number | react_native_reanimated.SharedValue<number | undefined> | undefined;
            tvParallaxMagnification?: number | react_native_reanimated.SharedValue<number | undefined> | undefined;
            onStartShouldSetResponder?: ((event: react_native.GestureResponderEvent) => boolean) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => boolean) | undefined> | undefined;
            onMoveShouldSetResponder?: ((event: react_native.GestureResponderEvent) => boolean) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => boolean) | undefined> | undefined;
            onResponderEnd?: ((event: react_native.GestureResponderEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => void) | undefined> | undefined;
            onResponderGrant?: ((event: react_native.GestureResponderEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => void) | undefined> | undefined;
            onResponderReject?: ((event: react_native.GestureResponderEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => void) | undefined> | undefined;
            onResponderMove?: ((event: react_native.GestureResponderEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => void) | undefined> | undefined;
            onResponderRelease?: ((event: react_native.GestureResponderEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => void) | undefined> | undefined;
            onResponderStart?: ((event: react_native.GestureResponderEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => void) | undefined> | undefined;
            onResponderTerminationRequest?: ((event: react_native.GestureResponderEvent) => boolean) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => boolean) | undefined> | undefined;
            onResponderTerminate?: ((event: react_native.GestureResponderEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => void) | undefined> | undefined;
            onStartShouldSetResponderCapture?: ((event: react_native.GestureResponderEvent) => boolean) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => boolean) | undefined> | undefined;
            onMoveShouldSetResponderCapture?: ((event: react_native.GestureResponderEvent) => boolean) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => boolean) | undefined> | undefined;
            onTouchStart?: ((event: react_native.GestureResponderEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => void) | undefined> | undefined;
            onTouchMove?: ((event: react_native.GestureResponderEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => void) | undefined> | undefined;
            onTouchEnd?: ((event: react_native.GestureResponderEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => void) | undefined> | undefined;
            onTouchCancel?: ((event: react_native.GestureResponderEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => void) | undefined> | undefined;
            onTouchEndCapture?: ((event: react_native.GestureResponderEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => void) | undefined> | undefined;
            onPointerEnter?: ((event: react_native.PointerEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.PointerEvent) => void) | undefined> | undefined;
            onPointerEnterCapture?: ((event: react_native.PointerEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.PointerEvent) => void) | undefined> | undefined;
            onPointerLeave?: ((event: react_native.PointerEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.PointerEvent) => void) | undefined> | undefined;
            onPointerLeaveCapture?: ((event: react_native.PointerEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.PointerEvent) => void) | undefined> | undefined;
            onPointerMove?: ((event: react_native.PointerEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.PointerEvent) => void) | undefined> | undefined;
            onPointerMoveCapture?: ((event: react_native.PointerEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.PointerEvent) => void) | undefined> | undefined;
            onPointerCancel?: ((event: react_native.PointerEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.PointerEvent) => void) | undefined> | undefined;
            onPointerCancelCapture?: ((event: react_native.PointerEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.PointerEvent) => void) | undefined> | undefined;
            onPointerDown?: ((event: react_native.PointerEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.PointerEvent) => void) | undefined> | undefined;
            onPointerDownCapture?: ((event: react_native.PointerEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.PointerEvent) => void) | undefined> | undefined;
            onPointerUp?: ((event: react_native.PointerEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.PointerEvent) => void) | undefined> | undefined;
            onPointerUpCapture?: ((event: react_native.PointerEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.PointerEvent) => void) | undefined> | undefined;
            accessible?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            accessibilityActions?: readonly Readonly<{
                name: react_native.AccessibilityActionName | string;
                label?: string | undefined;
            }>[] | react_native_reanimated.SharedValue<readonly Readonly<{
                name: react_native.AccessibilityActionName | string;
                label?: string | undefined;
            }>[] | undefined> | undefined;
            accessibilityLabel?: string | react_native_reanimated.SharedValue<string | undefined> | undefined;
            'aria-label'?: string | react_native_reanimated.SharedValue<string | undefined> | undefined;
            accessibilityRole?: react_native.AccessibilityRole | react_native_reanimated.SharedValue<react_native.AccessibilityRole | undefined> | undefined;
            accessibilityState?: react_native.AccessibilityState | react_native_reanimated.SharedValue<react_native.AccessibilityState | undefined> | undefined;
            'aria-busy'?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            'aria-checked'?: boolean | "mixed" | react_native_reanimated.SharedValue<boolean | "mixed" | undefined> | undefined;
            'aria-disabled'?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            'aria-expanded'?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            'aria-selected'?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            accessibilityHint?: string | react_native_reanimated.SharedValue<string | undefined> | undefined;
            accessibilityValue?: react_native.AccessibilityValue | react_native_reanimated.SharedValue<react_native.AccessibilityValue | undefined> | undefined;
            'aria-valuemax'?: number | react_native_reanimated.SharedValue<number | undefined> | undefined;
            'aria-valuemin'?: number | react_native_reanimated.SharedValue<number | undefined> | undefined;
            'aria-valuenow'?: number | react_native_reanimated.SharedValue<number | undefined> | undefined;
            'aria-valuetext'?: string | react_native_reanimated.SharedValue<string | undefined> | undefined;
            onAccessibilityAction?: ((event: react_native.AccessibilityActionEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.AccessibilityActionEvent) => void) | undefined> | undefined;
            importantForAccessibility?: "auto" | "yes" | "no" | "no-hide-descendants" | react_native_reanimated.SharedValue<"auto" | "yes" | "no" | "no-hide-descendants" | undefined> | undefined;
            'aria-hidden'?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            'aria-modal'?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            role?: react_native.Role | react_native_reanimated.SharedValue<react_native.Role | undefined> | undefined;
            accessibilityLabelledBy?: string | string[] | react_native_reanimated.SharedValue<string | string[] | undefined> | undefined;
            'aria-labelledby'?: string | react_native_reanimated.SharedValue<string | undefined> | undefined;
            accessibilityLiveRegion?: "none" | "polite" | "assertive" | react_native_reanimated.SharedValue<"none" | "polite" | "assertive" | undefined> | undefined;
            'aria-live'?: "polite" | "assertive" | "off" | react_native_reanimated.SharedValue<"polite" | "assertive" | "off" | undefined> | undefined;
            accessibilityElementsHidden?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            accessibilityViewIsModal?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            onAccessibilityEscape?: (() => void) | react_native_reanimated.SharedValue<(() => void) | undefined> | undefined;
            onAccessibilityTap?: (() => void) | react_native_reanimated.SharedValue<(() => void) | undefined> | undefined;
            onMagicTap?: (() => void) | react_native_reanimated.SharedValue<(() => void) | undefined> | undefined;
            accessibilityIgnoresInvertColors?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            accessibilityLanguage?: string | react_native_reanimated.SharedValue<string | undefined> | undefined;
            accessibilityShowsLargeContentViewer?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            accessibilityLargeContentTitle?: string | react_native_reanimated.SharedValue<string | undefined> | undefined;
            decelerationRate?: number | "normal" | "fast" | react_native_reanimated.SharedValue<number | "normal" | "fast" | undefined> | undefined;
            horizontal?: boolean | react_native_reanimated.SharedValue<boolean | null | undefined> | null | undefined;
            invertStickyHeaders?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            keyboardDismissMode?: "none" | "interactive" | "on-drag" | react_native_reanimated.SharedValue<"none" | "interactive" | "on-drag" | undefined> | undefined;
            keyboardShouldPersistTaps?: boolean | "always" | "never" | "handled" | react_native_reanimated.SharedValue<boolean | "always" | "never" | "handled" | undefined> | undefined;
            onContentSizeChange?: ((w: number, h: number) => void) | react_native_reanimated.SharedValue<((w: number, h: number) => void) | undefined> | undefined;
            onScroll?: ((event: react_native.NativeSyntheticEvent<react_native.NativeScrollEvent>) => void) | react_native_reanimated.SharedValue<((event: react_native.NativeSyntheticEvent<react_native.NativeScrollEvent>) => void) | undefined> | undefined;
            onScrollBeginDrag?: ((event: react_native.NativeSyntheticEvent<react_native.NativeScrollEvent>) => void) | react_native_reanimated.SharedValue<((event: react_native.NativeSyntheticEvent<react_native.NativeScrollEvent>) => void) | undefined> | undefined;
            onScrollEndDrag?: ((event: react_native.NativeSyntheticEvent<react_native.NativeScrollEvent>) => void) | react_native_reanimated.SharedValue<((event: react_native.NativeSyntheticEvent<react_native.NativeScrollEvent>) => void) | undefined> | undefined;
            onMomentumScrollEnd?: ((event: react_native.NativeSyntheticEvent<react_native.NativeScrollEvent>) => void) | react_native_reanimated.SharedValue<((event: react_native.NativeSyntheticEvent<react_native.NativeScrollEvent>) => void) | undefined> | undefined;
            onMomentumScrollBegin?: ((event: react_native.NativeSyntheticEvent<react_native.NativeScrollEvent>) => void) | react_native_reanimated.SharedValue<((event: react_native.NativeSyntheticEvent<react_native.NativeScrollEvent>) => void) | undefined> | undefined;
            pagingEnabled?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            scrollEnabled?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            showsHorizontalScrollIndicator?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            showsVerticalScrollIndicator?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            stickyHeaderHiddenOnScroll?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            refreshControl?: react.ReactElement<react_native.RefreshControlProps, string | react.JSXElementConstructor<any>> | react_native_reanimated.SharedValue<react.ReactElement<react_native.RefreshControlProps, string | react.JSXElementConstructor<any>> | undefined> | undefined;
            snapToInterval?: number | react_native_reanimated.SharedValue<number | undefined> | undefined;
            snapToOffsets?: number[] | react_native_reanimated.SharedValue<number[] | undefined> | undefined;
            snapToStart?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            snapToEnd?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            stickyHeaderIndices?: number[] | react_native_reanimated.SharedValue<number[] | undefined> | undefined;
            disableIntervalMomentum?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            disableScrollViewPanResponder?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            StickyHeaderComponent?: react.ComponentType<any> | react_native_reanimated.SharedValue<react.ComponentType<any> | undefined> | undefined;
            alwaysBounceHorizontal?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            alwaysBounceVertical?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            automaticallyAdjustContentInsets?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            automaticallyAdjustKeyboardInsets?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            automaticallyAdjustsScrollIndicatorInsets?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            bounces?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            bouncesZoom?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            canCancelContentTouches?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            centerContent?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            contentInset?: react_native.Insets | react_native_reanimated.SharedValue<react_native.Insets | undefined> | undefined;
            contentOffset?: react_native.PointProp | react_native_reanimated.SharedValue<react_native.PointProp | undefined> | undefined;
            contentInsetAdjustmentBehavior?: "always" | "never" | "automatic" | "scrollableAxes" | react_native_reanimated.SharedValue<"always" | "never" | "automatic" | "scrollableAxes" | undefined> | undefined;
            directionalLockEnabled?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            maintainVisibleContentPosition?: {
                autoscrollToTopThreshold?: number | null | undefined;
                minIndexForVisible: number;
            } | react_native_reanimated.SharedValue<{
                autoscrollToTopThreshold?: number | null | undefined;
                minIndexForVisible: number;
            } | null | undefined> | null | undefined;
            maximumZoomScale?: number | react_native_reanimated.SharedValue<number | undefined> | undefined;
            minimumZoomScale?: number | react_native_reanimated.SharedValue<number | undefined> | undefined;
            onScrollAnimationEnd?: (() => void) | react_native_reanimated.SharedValue<(() => void) | undefined> | undefined;
            pinchGestureEnabled?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            scrollEventThrottle?: number | react_native_reanimated.SharedValue<number | undefined> | undefined;
            scrollIndicatorInsets?: react_native.Insets | react_native_reanimated.SharedValue<react_native.Insets | undefined> | undefined;
            scrollToOverflowEnabled?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            scrollsToTop?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            snapToAlignment?: "center" | "end" | "start" | react_native_reanimated.SharedValue<"center" | "end" | "start" | undefined> | undefined;
            onScrollToTop?: ((event: react_native.NativeSyntheticEvent<react_native.NativeScrollEvent>) => void) | react_native_reanimated.SharedValue<((event: react_native.NativeSyntheticEvent<react_native.NativeScrollEvent>) => void) | undefined> | undefined;
            zoomScale?: number | react_native_reanimated.SharedValue<number | undefined> | undefined;
            endFillColor?: react_native.ColorValue | react_native_reanimated.SharedValue<react_native.ColorValue | undefined> | undefined;
            scrollPerfTag?: string | react_native_reanimated.SharedValue<string | undefined> | undefined;
            overScrollMode?: "always" | "never" | "auto" | react_native_reanimated.SharedValue<"always" | "never" | "auto" | undefined> | undefined;
            nestedScrollEnabled?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            fadingEdgeLength?: number | react_native_reanimated.SharedValue<number | undefined> | undefined;
            persistentScrollbar?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        } & {
            style?: react_native.StyleProp<react_native_reanimated.AnimatedStyle<react_native.StyleProp<react_native.ViewStyle>>>;
            contentContainerStyle?: react_native.StyleProp<react_native_reanimated.AnimatedStyle<react_native.StyleProp<react_native.ViewStyle>>>;
            indicatorStyle?: react_native.StyleProp<react_native_reanimated.AnimatedStyle<"default" | "black" | "white" | undefined>>;
        } & {
            layout?: react_native_reanimated.BaseAnimationBuilder | react_native_reanimated.LayoutAnimationFunction | typeof react_native_reanimated.BaseAnimationBuilder;
            entering?: react_native_reanimated.BaseAnimationBuilder | typeof react_native_reanimated.BaseAnimationBuilder | react_native_reanimated.EntryExitAnimationFunction | react_native_reanimated_lib_typescript_layoutReanimation_animationBuilder_Keyframe.ReanimatedKeyframe;
            exiting?: react_native_reanimated.BaseAnimationBuilder | typeof react_native_reanimated.BaseAnimationBuilder | react_native_reanimated.EntryExitAnimationFunction | react_native_reanimated_lib_typescript_layoutReanimation_animationBuilder_Keyframe.ReanimatedKeyframe;
        } & {
            sharedTransitionTag?: string;
            sharedTransitionStyle?: react_native_reanimated.SharedTransition;
        }> | undefined;
    } & react.RefAttributes<never>>>;
    FlatList: react.MemoExoticComponent<react.ForwardRefExoticComponent<{
        children?: react.ReactNode | react_native_reanimated.SharedValue<react.ReactNode>;
        hitSlop?: number | react_native.Insets | react_native_reanimated.SharedValue<number | react_native.Insets | null | undefined> | null | undefined;
        id?: string | react_native_reanimated.SharedValue<string | undefined> | undefined;
        needsOffscreenAlphaCompositing?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        onLayout?: ((event: react_native.LayoutChangeEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.LayoutChangeEvent) => void) | undefined> | undefined;
        pointerEvents?: "auto" | "none" | "box-none" | "box-only" | react_native_reanimated.SharedValue<"auto" | "none" | "box-none" | "box-only" | undefined> | undefined;
        removeClippedSubviews?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        testID?: string | react_native_reanimated.SharedValue<string | undefined> | undefined;
        nativeID?: string | react_native_reanimated.SharedValue<string | undefined> | undefined;
        collapsable?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        collapsableChildren?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        renderToHardwareTextureAndroid?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        focusable?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        tabIndex?: 0 | -1 | react_native_reanimated.SharedValue<0 | -1 | undefined> | undefined;
        shouldRasterizeIOS?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        isTVSelectable?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        hasTVPreferredFocus?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        tvParallaxShiftDistanceX?: number | react_native_reanimated.SharedValue<number | undefined> | undefined;
        tvParallaxShiftDistanceY?: number | react_native_reanimated.SharedValue<number | undefined> | undefined;
        tvParallaxTiltAngle?: number | react_native_reanimated.SharedValue<number | undefined> | undefined;
        tvParallaxMagnification?: number | react_native_reanimated.SharedValue<number | undefined> | undefined;
        onStartShouldSetResponder?: ((event: react_native.GestureResponderEvent) => boolean) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => boolean) | undefined> | undefined;
        onMoveShouldSetResponder?: ((event: react_native.GestureResponderEvent) => boolean) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => boolean) | undefined> | undefined;
        onResponderEnd?: ((event: react_native.GestureResponderEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => void) | undefined> | undefined;
        onResponderGrant?: ((event: react_native.GestureResponderEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => void) | undefined> | undefined;
        onResponderReject?: ((event: react_native.GestureResponderEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => void) | undefined> | undefined;
        onResponderMove?: ((event: react_native.GestureResponderEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => void) | undefined> | undefined;
        onResponderRelease?: ((event: react_native.GestureResponderEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => void) | undefined> | undefined;
        onResponderStart?: ((event: react_native.GestureResponderEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => void) | undefined> | undefined;
        onResponderTerminationRequest?: ((event: react_native.GestureResponderEvent) => boolean) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => boolean) | undefined> | undefined;
        onResponderTerminate?: ((event: react_native.GestureResponderEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => void) | undefined> | undefined;
        onStartShouldSetResponderCapture?: ((event: react_native.GestureResponderEvent) => boolean) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => boolean) | undefined> | undefined;
        onMoveShouldSetResponderCapture?: ((event: react_native.GestureResponderEvent) => boolean) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => boolean) | undefined> | undefined;
        onTouchStart?: ((event: react_native.GestureResponderEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => void) | undefined> | undefined;
        onTouchMove?: ((event: react_native.GestureResponderEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => void) | undefined> | undefined;
        onTouchEnd?: ((event: react_native.GestureResponderEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => void) | undefined> | undefined;
        onTouchCancel?: ((event: react_native.GestureResponderEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => void) | undefined> | undefined;
        onTouchEndCapture?: ((event: react_native.GestureResponderEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => void) | undefined> | undefined;
        onPointerEnter?: ((event: react_native.PointerEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.PointerEvent) => void) | undefined> | undefined;
        onPointerEnterCapture?: ((event: react_native.PointerEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.PointerEvent) => void) | undefined> | undefined;
        onPointerLeave?: ((event: react_native.PointerEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.PointerEvent) => void) | undefined> | undefined;
        onPointerLeaveCapture?: ((event: react_native.PointerEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.PointerEvent) => void) | undefined> | undefined;
        onPointerMove?: ((event: react_native.PointerEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.PointerEvent) => void) | undefined> | undefined;
        onPointerMoveCapture?: ((event: react_native.PointerEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.PointerEvent) => void) | undefined> | undefined;
        onPointerCancel?: ((event: react_native.PointerEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.PointerEvent) => void) | undefined> | undefined;
        onPointerCancelCapture?: ((event: react_native.PointerEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.PointerEvent) => void) | undefined> | undefined;
        onPointerDown?: ((event: react_native.PointerEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.PointerEvent) => void) | undefined> | undefined;
        onPointerDownCapture?: ((event: react_native.PointerEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.PointerEvent) => void) | undefined> | undefined;
        onPointerUp?: ((event: react_native.PointerEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.PointerEvent) => void) | undefined> | undefined;
        onPointerUpCapture?: ((event: react_native.PointerEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.PointerEvent) => void) | undefined> | undefined;
        accessible?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        accessibilityActions?: readonly Readonly<{
            name: react_native.AccessibilityActionName | string;
            label?: string | undefined;
        }>[] | react_native_reanimated.SharedValue<readonly Readonly<{
            name: react_native.AccessibilityActionName | string;
            label?: string | undefined;
        }>[] | undefined> | undefined;
        accessibilityLabel?: string | react_native_reanimated.SharedValue<string | undefined> | undefined;
        'aria-label'?: string | react_native_reanimated.SharedValue<string | undefined> | undefined;
        accessibilityRole?: react_native.AccessibilityRole | react_native_reanimated.SharedValue<react_native.AccessibilityRole | undefined> | undefined;
        accessibilityState?: react_native.AccessibilityState | react_native_reanimated.SharedValue<react_native.AccessibilityState | undefined> | undefined;
        'aria-busy'?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        'aria-checked'?: boolean | "mixed" | react_native_reanimated.SharedValue<boolean | "mixed" | undefined> | undefined;
        'aria-disabled'?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        'aria-expanded'?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        'aria-selected'?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        accessibilityHint?: string | react_native_reanimated.SharedValue<string | undefined> | undefined;
        accessibilityValue?: react_native.AccessibilityValue | react_native_reanimated.SharedValue<react_native.AccessibilityValue | undefined> | undefined;
        'aria-valuemax'?: number | react_native_reanimated.SharedValue<number | undefined> | undefined;
        'aria-valuemin'?: number | react_native_reanimated.SharedValue<number | undefined> | undefined;
        'aria-valuenow'?: number | react_native_reanimated.SharedValue<number | undefined> | undefined;
        'aria-valuetext'?: string | react_native_reanimated.SharedValue<string | undefined> | undefined;
        onAccessibilityAction?: ((event: react_native.AccessibilityActionEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.AccessibilityActionEvent) => void) | undefined> | undefined;
        importantForAccessibility?: "auto" | "yes" | "no" | "no-hide-descendants" | react_native_reanimated.SharedValue<"auto" | "yes" | "no" | "no-hide-descendants" | undefined> | undefined;
        'aria-hidden'?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        'aria-modal'?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        role?: react_native.Role | react_native_reanimated.SharedValue<react_native.Role | undefined> | undefined;
        accessibilityLabelledBy?: string | string[] | react_native_reanimated.SharedValue<string | string[] | undefined> | undefined;
        'aria-labelledby'?: string | react_native_reanimated.SharedValue<string | undefined> | undefined;
        accessibilityLiveRegion?: "none" | "polite" | "assertive" | react_native_reanimated.SharedValue<"none" | "polite" | "assertive" | undefined> | undefined;
        'aria-live'?: "polite" | "assertive" | "off" | react_native_reanimated.SharedValue<"polite" | "assertive" | "off" | undefined> | undefined;
        accessibilityElementsHidden?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        accessibilityViewIsModal?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        onAccessibilityEscape?: (() => void) | react_native_reanimated.SharedValue<(() => void) | undefined> | undefined;
        onAccessibilityTap?: (() => void) | react_native_reanimated.SharedValue<(() => void) | undefined> | undefined;
        onMagicTap?: (() => void) | react_native_reanimated.SharedValue<(() => void) | undefined> | undefined;
        accessibilityIgnoresInvertColors?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        accessibilityLanguage?: string | react_native_reanimated.SharedValue<string | undefined> | undefined;
        accessibilityShowsLargeContentViewer?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        accessibilityLargeContentTitle?: string | react_native_reanimated.SharedValue<string | undefined> | undefined;
        data: ArrayLike<unknown> | react_native_reanimated.SharedValue<ArrayLike<unknown> | null | undefined> | null | undefined;
        decelerationRate?: number | "normal" | "fast" | react_native_reanimated.SharedValue<number | "normal" | "fast" | undefined> | undefined;
        horizontal?: boolean | react_native_reanimated.SharedValue<boolean | null | undefined> | null | undefined;
        invertStickyHeaders?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        keyboardDismissMode?: "none" | "interactive" | "on-drag" | react_native_reanimated.SharedValue<"none" | "interactive" | "on-drag" | undefined> | undefined;
        keyboardShouldPersistTaps?: boolean | "always" | "never" | "handled" | react_native_reanimated.SharedValue<boolean | "always" | "never" | "handled" | undefined> | undefined;
        onContentSizeChange?: ((w: number, h: number) => void) | react_native_reanimated.SharedValue<((w: number, h: number) => void) | undefined> | undefined;
        onScroll?: ((event: react_native.NativeSyntheticEvent<react_native.NativeScrollEvent>) => void) | react_native_reanimated.SharedValue<((event: react_native.NativeSyntheticEvent<react_native.NativeScrollEvent>) => void) | undefined> | undefined;
        onScrollBeginDrag?: ((event: react_native.NativeSyntheticEvent<react_native.NativeScrollEvent>) => void) | react_native_reanimated.SharedValue<((event: react_native.NativeSyntheticEvent<react_native.NativeScrollEvent>) => void) | undefined> | undefined;
        onScrollEndDrag?: ((event: react_native.NativeSyntheticEvent<react_native.NativeScrollEvent>) => void) | react_native_reanimated.SharedValue<((event: react_native.NativeSyntheticEvent<react_native.NativeScrollEvent>) => void) | undefined> | undefined;
        onMomentumScrollEnd?: ((event: react_native.NativeSyntheticEvent<react_native.NativeScrollEvent>) => void) | react_native_reanimated.SharedValue<((event: react_native.NativeSyntheticEvent<react_native.NativeScrollEvent>) => void) | undefined> | undefined;
        onMomentumScrollBegin?: ((event: react_native.NativeSyntheticEvent<react_native.NativeScrollEvent>) => void) | react_native_reanimated.SharedValue<((event: react_native.NativeSyntheticEvent<react_native.NativeScrollEvent>) => void) | undefined> | undefined;
        pagingEnabled?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        scrollEnabled?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        showsHorizontalScrollIndicator?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        showsVerticalScrollIndicator?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        stickyHeaderHiddenOnScroll?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        refreshControl?: react.ReactElement<react_native.RefreshControlProps, string | react.JSXElementConstructor<any>> | react_native_reanimated.SharedValue<react.ReactElement<react_native.RefreshControlProps, string | react.JSXElementConstructor<any>> | undefined> | undefined;
        snapToInterval?: number | react_native_reanimated.SharedValue<number | undefined> | undefined;
        snapToOffsets?: number[] | react_native_reanimated.SharedValue<number[] | undefined> | undefined;
        snapToStart?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        snapToEnd?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        stickyHeaderIndices?: number[] | react_native_reanimated.SharedValue<number[] | undefined> | undefined;
        disableIntervalMomentum?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        disableScrollViewPanResponder?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        StickyHeaderComponent?: react.ComponentType<any> | react_native_reanimated.SharedValue<react.ComponentType<any> | undefined> | undefined;
        alwaysBounceHorizontal?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        alwaysBounceVertical?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        automaticallyAdjustContentInsets?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        automaticallyAdjustKeyboardInsets?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        automaticallyAdjustsScrollIndicatorInsets?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        bounces?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        bouncesZoom?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        canCancelContentTouches?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        centerContent?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        contentInset?: react_native.Insets | react_native_reanimated.SharedValue<react_native.Insets | undefined> | undefined;
        contentOffset?: react_native.PointProp | react_native_reanimated.SharedValue<react_native.PointProp | undefined> | undefined;
        contentInsetAdjustmentBehavior?: "always" | "never" | "automatic" | "scrollableAxes" | react_native_reanimated.SharedValue<"always" | "never" | "automatic" | "scrollableAxes" | undefined> | undefined;
        directionalLockEnabled?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        maintainVisibleContentPosition?: {
            autoscrollToTopThreshold?: number | null | undefined;
            minIndexForVisible: number;
        } | react_native_reanimated.SharedValue<{
            autoscrollToTopThreshold?: number | null | undefined;
            minIndexForVisible: number;
        } | null | undefined> | null | undefined;
        maximumZoomScale?: number | react_native_reanimated.SharedValue<number | undefined> | undefined;
        minimumZoomScale?: number | react_native_reanimated.SharedValue<number | undefined> | undefined;
        onScrollAnimationEnd?: (() => void) | react_native_reanimated.SharedValue<(() => void) | undefined> | undefined;
        pinchGestureEnabled?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        scrollEventThrottle?: number | react_native_reanimated.SharedValue<number | undefined> | undefined;
        scrollIndicatorInsets?: react_native.Insets | react_native_reanimated.SharedValue<react_native.Insets | undefined> | undefined;
        scrollToOverflowEnabled?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        scrollsToTop?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        snapToAlignment?: "center" | "end" | "start" | react_native_reanimated.SharedValue<"center" | "end" | "start" | undefined> | undefined;
        onScrollToTop?: ((event: react_native.NativeSyntheticEvent<react_native.NativeScrollEvent>) => void) | react_native_reanimated.SharedValue<((event: react_native.NativeSyntheticEvent<react_native.NativeScrollEvent>) => void) | undefined> | undefined;
        zoomScale?: number | react_native_reanimated.SharedValue<number | undefined> | undefined;
        endFillColor?: react_native.ColorValue | react_native_reanimated.SharedValue<react_native.ColorValue | undefined> | undefined;
        scrollPerfTag?: string | react_native_reanimated.SharedValue<string | undefined> | undefined;
        overScrollMode?: "always" | "never" | "auto" | react_native_reanimated.SharedValue<"always" | "never" | "auto" | undefined> | undefined;
        nestedScrollEnabled?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        fadingEdgeLength?: number | react_native_reanimated.SharedValue<number | undefined> | undefined;
        persistentScrollbar?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        extraData?: any | undefined;
        getItemLayout?: ((data: ArrayLike<unknown> | null | undefined, index: number) => {
            length: number;
            offset: number;
            index: number;
        }) | react_native_reanimated.SharedValue<((data: ArrayLike<unknown> | null | undefined, index: number) => {
            length: number;
            offset: number;
            index: number;
        }) | undefined> | undefined;
        initialNumToRender?: number | react_native_reanimated.SharedValue<number | undefined> | undefined;
        initialScrollIndex?: number | react_native_reanimated.SharedValue<number | null | undefined> | null | undefined;
        keyExtractor?: ((item: unknown, index: number) => string) | react_native_reanimated.SharedValue<((item: unknown, index: number) => string) | undefined> | undefined;
        legacyImplementation?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        numColumns?: number | react_native_reanimated.SharedValue<number | undefined> | undefined;
        onRefresh?: (() => void) | react_native_reanimated.SharedValue<(() => void) | null | undefined> | null | undefined;
        onViewableItemsChanged?: ((info: {
            viewableItems: react_native.ViewToken<unknown>[];
            changed: react_native.ViewToken<unknown>[];
        }) => void) | react_native_reanimated.SharedValue<((info: {
            viewableItems: react_native.ViewToken<unknown>[];
            changed: react_native.ViewToken<unknown>[];
        }) => void) | null | undefined> | null | undefined;
        refreshing?: boolean | react_native_reanimated.SharedValue<boolean | null | undefined> | null | undefined;
        renderItem: react_native.ListRenderItem<unknown> | react_native_reanimated.SharedValue<react_native.ListRenderItem<unknown> | null | undefined> | null | undefined;
        viewabilityConfig?: react_native.ViewabilityConfig | react_native_reanimated.SharedValue<react_native.ViewabilityConfig | undefined> | undefined;
        ItemSeparatorComponent?: react.ComponentType<any> | react_native_reanimated.SharedValue<react.ComponentType<any> | null | undefined> | null | undefined;
        ListEmptyComponent?: react.ReactElement<unknown, string | react.JSXElementConstructor<any>> | react.ComponentType<any> | react_native_reanimated.SharedValue<react.ReactElement<unknown, string | react.JSXElementConstructor<any>> | react.ComponentType<any> | null | undefined> | null | undefined;
        ListFooterComponent?: react.ReactElement<unknown, string | react.JSXElementConstructor<any>> | react.ComponentType<any> | react_native_reanimated.SharedValue<react.ReactElement<unknown, string | react.JSXElementConstructor<any>> | react.ComponentType<any> | null | undefined> | null | undefined;
        ListHeaderComponent?: react.ReactElement<unknown, string | react.JSXElementConstructor<any>> | react.ComponentType<any> | react_native_reanimated.SharedValue<react.ReactElement<unknown, string | react.JSXElementConstructor<any>> | react.ComponentType<any> | null | undefined> | null | undefined;
        debug?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        disableVirtualization?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
        getItem?: ((data: any, index: number) => unknown) | react_native_reanimated.SharedValue<((data: any, index: number) => unknown) | undefined> | undefined;
        getItemCount?: ((data: any) => number) | react_native_reanimated.SharedValue<((data: any) => number) | undefined> | undefined;
        inverted?: boolean | react_native_reanimated.SharedValue<boolean | null | undefined> | null | undefined;
        maxToRenderPerBatch?: number | react_native_reanimated.SharedValue<number | undefined> | undefined;
        onEndReached?: ((info: {
            distanceFromEnd: number;
        }) => void) | react_native_reanimated.SharedValue<((info: {
            distanceFromEnd: number;
        }) => void) | null | undefined> | null | undefined;
        onEndReachedThreshold?: number | react_native_reanimated.SharedValue<number | null | undefined> | null | undefined;
        onScrollToIndexFailed?: ((info: {
            index: number;
            highestMeasuredFrameIndex: number;
            averageItemLength: number;
        }) => void) | react_native_reanimated.SharedValue<((info: {
            index: number;
            highestMeasuredFrameIndex: number;
            averageItemLength: number;
        }) => void) | undefined> | undefined;
        onStartReached?: ((info: {
            distanceFromStart: number;
        }) => void) | react_native_reanimated.SharedValue<((info: {
            distanceFromStart: number;
        }) => void) | null | undefined> | null | undefined;
        onStartReachedThreshold?: number | react_native_reanimated.SharedValue<number | null | undefined> | null | undefined;
        progressViewOffset?: number | react_native_reanimated.SharedValue<number | undefined> | undefined;
        renderScrollComponent?: ((props: react_native.ScrollViewProps) => React.ReactElement<react_native.ScrollViewProps>) | react_native_reanimated.SharedValue<((props: react_native.ScrollViewProps) => React.ReactElement<react_native.ScrollViewProps>) | undefined> | undefined;
        updateCellsBatchingPeriod?: number | react_native_reanimated.SharedValue<number | undefined> | undefined;
        viewabilityConfigCallbackPairs?: react_native.ViewabilityConfigCallbackPairs | react_native_reanimated.SharedValue<react_native.ViewabilityConfigCallbackPairs | undefined> | undefined;
        windowSize?: number | react_native_reanimated.SharedValue<number | undefined> | undefined;
        CellRendererComponent?: react.ComponentType<react_native.CellRendererProps<unknown>> | react_native_reanimated.SharedValue<react.ComponentType<react_native.CellRendererProps<unknown>> | null | undefined> | null | undefined;
    } & {
        style?: react_native.StyleProp<react_native_reanimated.AnimatedStyle<react_native.StyleProp<react_native.ViewStyle>>>;
        contentContainerStyle?: react_native.StyleProp<react_native_reanimated.AnimatedStyle<react_native.StyleProp<react_native.ViewStyle>>>;
        indicatorStyle?: react_native.StyleProp<react_native_reanimated.AnimatedStyle<"default" | "black" | "white" | undefined>>;
        columnWrapperStyle?: react_native.StyleProp<react_native_reanimated.AnimatedStyle<react_native.StyleProp<react_native.ViewStyle>>>;
        ListFooterComponentStyle?: react_native.StyleProp<react_native_reanimated.AnimatedStyle<react_native.StyleProp<react_native.ViewStyle>>>;
        ListHeaderComponentStyle?: react_native.StyleProp<react_native_reanimated.AnimatedStyle<react_native.StyleProp<react_native.ViewStyle>>>;
    } & {
        layout?: react_native_reanimated.BaseAnimationBuilder | react_native_reanimated.LayoutAnimationFunction | typeof react_native_reanimated.BaseAnimationBuilder;
        entering?: react_native_reanimated.BaseAnimationBuilder | typeof react_native_reanimated.BaseAnimationBuilder | react_native_reanimated.EntryExitAnimationFunction | react_native_reanimated_lib_typescript_layoutReanimation_animationBuilder_Keyframe.ReanimatedKeyframe;
        exiting?: react_native_reanimated.BaseAnimationBuilder | typeof react_native_reanimated.BaseAnimationBuilder | react_native_reanimated.EntryExitAnimationFunction | react_native_reanimated_lib_typescript_layoutReanimation_animationBuilder_Keyframe.ReanimatedKeyframe;
    } & {
        sharedTransitionTag?: string;
        sharedTransitionStyle?: react_native_reanimated.SharedTransition;
    } & {
        animatedProps?: Partial<{
            children?: react.ReactNode | react_native_reanimated.SharedValue<react.ReactNode>;
            hitSlop?: number | react_native.Insets | react_native_reanimated.SharedValue<number | react_native.Insets | null | undefined> | null | undefined;
            id?: string | react_native_reanimated.SharedValue<string | undefined> | undefined;
            needsOffscreenAlphaCompositing?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            onLayout?: ((event: react_native.LayoutChangeEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.LayoutChangeEvent) => void) | undefined> | undefined;
            pointerEvents?: "auto" | "none" | "box-none" | "box-only" | react_native_reanimated.SharedValue<"auto" | "none" | "box-none" | "box-only" | undefined> | undefined;
            removeClippedSubviews?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            testID?: string | react_native_reanimated.SharedValue<string | undefined> | undefined;
            nativeID?: string | react_native_reanimated.SharedValue<string | undefined> | undefined;
            collapsable?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            collapsableChildren?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            renderToHardwareTextureAndroid?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            focusable?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            tabIndex?: 0 | -1 | react_native_reanimated.SharedValue<0 | -1 | undefined> | undefined;
            shouldRasterizeIOS?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            isTVSelectable?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            hasTVPreferredFocus?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            tvParallaxShiftDistanceX?: number | react_native_reanimated.SharedValue<number | undefined> | undefined;
            tvParallaxShiftDistanceY?: number | react_native_reanimated.SharedValue<number | undefined> | undefined;
            tvParallaxTiltAngle?: number | react_native_reanimated.SharedValue<number | undefined> | undefined;
            tvParallaxMagnification?: number | react_native_reanimated.SharedValue<number | undefined> | undefined;
            onStartShouldSetResponder?: ((event: react_native.GestureResponderEvent) => boolean) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => boolean) | undefined> | undefined;
            onMoveShouldSetResponder?: ((event: react_native.GestureResponderEvent) => boolean) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => boolean) | undefined> | undefined;
            onResponderEnd?: ((event: react_native.GestureResponderEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => void) | undefined> | undefined;
            onResponderGrant?: ((event: react_native.GestureResponderEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => void) | undefined> | undefined;
            onResponderReject?: ((event: react_native.GestureResponderEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => void) | undefined> | undefined;
            onResponderMove?: ((event: react_native.GestureResponderEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => void) | undefined> | undefined;
            onResponderRelease?: ((event: react_native.GestureResponderEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => void) | undefined> | undefined;
            onResponderStart?: ((event: react_native.GestureResponderEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => void) | undefined> | undefined;
            onResponderTerminationRequest?: ((event: react_native.GestureResponderEvent) => boolean) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => boolean) | undefined> | undefined;
            onResponderTerminate?: ((event: react_native.GestureResponderEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => void) | undefined> | undefined;
            onStartShouldSetResponderCapture?: ((event: react_native.GestureResponderEvent) => boolean) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => boolean) | undefined> | undefined;
            onMoveShouldSetResponderCapture?: ((event: react_native.GestureResponderEvent) => boolean) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => boolean) | undefined> | undefined;
            onTouchStart?: ((event: react_native.GestureResponderEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => void) | undefined> | undefined;
            onTouchMove?: ((event: react_native.GestureResponderEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => void) | undefined> | undefined;
            onTouchEnd?: ((event: react_native.GestureResponderEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => void) | undefined> | undefined;
            onTouchCancel?: ((event: react_native.GestureResponderEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => void) | undefined> | undefined;
            onTouchEndCapture?: ((event: react_native.GestureResponderEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.GestureResponderEvent) => void) | undefined> | undefined;
            onPointerEnter?: ((event: react_native.PointerEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.PointerEvent) => void) | undefined> | undefined;
            onPointerEnterCapture?: ((event: react_native.PointerEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.PointerEvent) => void) | undefined> | undefined;
            onPointerLeave?: ((event: react_native.PointerEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.PointerEvent) => void) | undefined> | undefined;
            onPointerLeaveCapture?: ((event: react_native.PointerEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.PointerEvent) => void) | undefined> | undefined;
            onPointerMove?: ((event: react_native.PointerEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.PointerEvent) => void) | undefined> | undefined;
            onPointerMoveCapture?: ((event: react_native.PointerEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.PointerEvent) => void) | undefined> | undefined;
            onPointerCancel?: ((event: react_native.PointerEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.PointerEvent) => void) | undefined> | undefined;
            onPointerCancelCapture?: ((event: react_native.PointerEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.PointerEvent) => void) | undefined> | undefined;
            onPointerDown?: ((event: react_native.PointerEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.PointerEvent) => void) | undefined> | undefined;
            onPointerDownCapture?: ((event: react_native.PointerEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.PointerEvent) => void) | undefined> | undefined;
            onPointerUp?: ((event: react_native.PointerEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.PointerEvent) => void) | undefined> | undefined;
            onPointerUpCapture?: ((event: react_native.PointerEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.PointerEvent) => void) | undefined> | undefined;
            accessible?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            accessibilityActions?: readonly Readonly<{
                name: react_native.AccessibilityActionName | string;
                label?: string | undefined;
            }>[] | react_native_reanimated.SharedValue<readonly Readonly<{
                name: react_native.AccessibilityActionName | string;
                label?: string | undefined;
            }>[] | undefined> | undefined;
            accessibilityLabel?: string | react_native_reanimated.SharedValue<string | undefined> | undefined;
            'aria-label'?: string | react_native_reanimated.SharedValue<string | undefined> | undefined;
            accessibilityRole?: react_native.AccessibilityRole | react_native_reanimated.SharedValue<react_native.AccessibilityRole | undefined> | undefined;
            accessibilityState?: react_native.AccessibilityState | react_native_reanimated.SharedValue<react_native.AccessibilityState | undefined> | undefined;
            'aria-busy'?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            'aria-checked'?: boolean | "mixed" | react_native_reanimated.SharedValue<boolean | "mixed" | undefined> | undefined;
            'aria-disabled'?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            'aria-expanded'?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            'aria-selected'?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            accessibilityHint?: string | react_native_reanimated.SharedValue<string | undefined> | undefined;
            accessibilityValue?: react_native.AccessibilityValue | react_native_reanimated.SharedValue<react_native.AccessibilityValue | undefined> | undefined;
            'aria-valuemax'?: number | react_native_reanimated.SharedValue<number | undefined> | undefined;
            'aria-valuemin'?: number | react_native_reanimated.SharedValue<number | undefined> | undefined;
            'aria-valuenow'?: number | react_native_reanimated.SharedValue<number | undefined> | undefined;
            'aria-valuetext'?: string | react_native_reanimated.SharedValue<string | undefined> | undefined;
            onAccessibilityAction?: ((event: react_native.AccessibilityActionEvent) => void) | react_native_reanimated.SharedValue<((event: react_native.AccessibilityActionEvent) => void) | undefined> | undefined;
            importantForAccessibility?: "auto" | "yes" | "no" | "no-hide-descendants" | react_native_reanimated.SharedValue<"auto" | "yes" | "no" | "no-hide-descendants" | undefined> | undefined;
            'aria-hidden'?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            'aria-modal'?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            role?: react_native.Role | react_native_reanimated.SharedValue<react_native.Role | undefined> | undefined;
            accessibilityLabelledBy?: string | string[] | react_native_reanimated.SharedValue<string | string[] | undefined> | undefined;
            'aria-labelledby'?: string | react_native_reanimated.SharedValue<string | undefined> | undefined;
            accessibilityLiveRegion?: "none" | "polite" | "assertive" | react_native_reanimated.SharedValue<"none" | "polite" | "assertive" | undefined> | undefined;
            'aria-live'?: "polite" | "assertive" | "off" | react_native_reanimated.SharedValue<"polite" | "assertive" | "off" | undefined> | undefined;
            accessibilityElementsHidden?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            accessibilityViewIsModal?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            onAccessibilityEscape?: (() => void) | react_native_reanimated.SharedValue<(() => void) | undefined> | undefined;
            onAccessibilityTap?: (() => void) | react_native_reanimated.SharedValue<(() => void) | undefined> | undefined;
            onMagicTap?: (() => void) | react_native_reanimated.SharedValue<(() => void) | undefined> | undefined;
            accessibilityIgnoresInvertColors?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            accessibilityLanguage?: string | react_native_reanimated.SharedValue<string | undefined> | undefined;
            accessibilityShowsLargeContentViewer?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            accessibilityLargeContentTitle?: string | react_native_reanimated.SharedValue<string | undefined> | undefined;
            data: ArrayLike<unknown> | react_native_reanimated.SharedValue<ArrayLike<unknown> | null | undefined> | null | undefined;
            decelerationRate?: number | "normal" | "fast" | react_native_reanimated.SharedValue<number | "normal" | "fast" | undefined> | undefined;
            horizontal?: boolean | react_native_reanimated.SharedValue<boolean | null | undefined> | null | undefined;
            invertStickyHeaders?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            keyboardDismissMode?: "none" | "interactive" | "on-drag" | react_native_reanimated.SharedValue<"none" | "interactive" | "on-drag" | undefined> | undefined;
            keyboardShouldPersistTaps?: boolean | "always" | "never" | "handled" | react_native_reanimated.SharedValue<boolean | "always" | "never" | "handled" | undefined> | undefined;
            onContentSizeChange?: ((w: number, h: number) => void) | react_native_reanimated.SharedValue<((w: number, h: number) => void) | undefined> | undefined;
            onScroll?: ((event: react_native.NativeSyntheticEvent<react_native.NativeScrollEvent>) => void) | react_native_reanimated.SharedValue<((event: react_native.NativeSyntheticEvent<react_native.NativeScrollEvent>) => void) | undefined> | undefined;
            onScrollBeginDrag?: ((event: react_native.NativeSyntheticEvent<react_native.NativeScrollEvent>) => void) | react_native_reanimated.SharedValue<((event: react_native.NativeSyntheticEvent<react_native.NativeScrollEvent>) => void) | undefined> | undefined;
            onScrollEndDrag?: ((event: react_native.NativeSyntheticEvent<react_native.NativeScrollEvent>) => void) | react_native_reanimated.SharedValue<((event: react_native.NativeSyntheticEvent<react_native.NativeScrollEvent>) => void) | undefined> | undefined;
            onMomentumScrollEnd?: ((event: react_native.NativeSyntheticEvent<react_native.NativeScrollEvent>) => void) | react_native_reanimated.SharedValue<((event: react_native.NativeSyntheticEvent<react_native.NativeScrollEvent>) => void) | undefined> | undefined;
            onMomentumScrollBegin?: ((event: react_native.NativeSyntheticEvent<react_native.NativeScrollEvent>) => void) | react_native_reanimated.SharedValue<((event: react_native.NativeSyntheticEvent<react_native.NativeScrollEvent>) => void) | undefined> | undefined;
            pagingEnabled?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            scrollEnabled?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            showsHorizontalScrollIndicator?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            showsVerticalScrollIndicator?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            stickyHeaderHiddenOnScroll?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            refreshControl?: react.ReactElement<react_native.RefreshControlProps, string | react.JSXElementConstructor<any>> | react_native_reanimated.SharedValue<react.ReactElement<react_native.RefreshControlProps, string | react.JSXElementConstructor<any>> | undefined> | undefined;
            snapToInterval?: number | react_native_reanimated.SharedValue<number | undefined> | undefined;
            snapToOffsets?: number[] | react_native_reanimated.SharedValue<number[] | undefined> | undefined;
            snapToStart?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            snapToEnd?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            stickyHeaderIndices?: number[] | react_native_reanimated.SharedValue<number[] | undefined> | undefined;
            disableIntervalMomentum?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            disableScrollViewPanResponder?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            StickyHeaderComponent?: react.ComponentType<any> | react_native_reanimated.SharedValue<react.ComponentType<any> | undefined> | undefined;
            alwaysBounceHorizontal?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            alwaysBounceVertical?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            automaticallyAdjustContentInsets?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            automaticallyAdjustKeyboardInsets?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            automaticallyAdjustsScrollIndicatorInsets?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            bounces?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            bouncesZoom?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            canCancelContentTouches?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            centerContent?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            contentInset?: react_native.Insets | react_native_reanimated.SharedValue<react_native.Insets | undefined> | undefined;
            contentOffset?: react_native.PointProp | react_native_reanimated.SharedValue<react_native.PointProp | undefined> | undefined;
            contentInsetAdjustmentBehavior?: "always" | "never" | "automatic" | "scrollableAxes" | react_native_reanimated.SharedValue<"always" | "never" | "automatic" | "scrollableAxes" | undefined> | undefined;
            directionalLockEnabled?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            maintainVisibleContentPosition?: {
                autoscrollToTopThreshold?: number | null | undefined;
                minIndexForVisible: number;
            } | react_native_reanimated.SharedValue<{
                autoscrollToTopThreshold?: number | null | undefined;
                minIndexForVisible: number;
            } | null | undefined> | null | undefined;
            maximumZoomScale?: number | react_native_reanimated.SharedValue<number | undefined> | undefined;
            minimumZoomScale?: number | react_native_reanimated.SharedValue<number | undefined> | undefined;
            onScrollAnimationEnd?: (() => void) | react_native_reanimated.SharedValue<(() => void) | undefined> | undefined;
            pinchGestureEnabled?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            scrollEventThrottle?: number | react_native_reanimated.SharedValue<number | undefined> | undefined;
            scrollIndicatorInsets?: react_native.Insets | react_native_reanimated.SharedValue<react_native.Insets | undefined> | undefined;
            scrollToOverflowEnabled?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            scrollsToTop?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            snapToAlignment?: "center" | "end" | "start" | react_native_reanimated.SharedValue<"center" | "end" | "start" | undefined> | undefined;
            onScrollToTop?: ((event: react_native.NativeSyntheticEvent<react_native.NativeScrollEvent>) => void) | react_native_reanimated.SharedValue<((event: react_native.NativeSyntheticEvent<react_native.NativeScrollEvent>) => void) | undefined> | undefined;
            zoomScale?: number | react_native_reanimated.SharedValue<number | undefined> | undefined;
            endFillColor?: react_native.ColorValue | react_native_reanimated.SharedValue<react_native.ColorValue | undefined> | undefined;
            scrollPerfTag?: string | react_native_reanimated.SharedValue<string | undefined> | undefined;
            overScrollMode?: "always" | "never" | "auto" | react_native_reanimated.SharedValue<"always" | "never" | "auto" | undefined> | undefined;
            nestedScrollEnabled?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            fadingEdgeLength?: number | react_native_reanimated.SharedValue<number | undefined> | undefined;
            persistentScrollbar?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            extraData?: any | undefined;
            getItemLayout?: ((data: ArrayLike<unknown> | null | undefined, index: number) => {
                length: number;
                offset: number;
                index: number;
            }) | react_native_reanimated.SharedValue<((data: ArrayLike<unknown> | null | undefined, index: number) => {
                length: number;
                offset: number;
                index: number;
            }) | undefined> | undefined;
            initialNumToRender?: number | react_native_reanimated.SharedValue<number | undefined> | undefined;
            initialScrollIndex?: number | react_native_reanimated.SharedValue<number | null | undefined> | null | undefined;
            keyExtractor?: ((item: unknown, index: number) => string) | react_native_reanimated.SharedValue<((item: unknown, index: number) => string) | undefined> | undefined;
            legacyImplementation?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            numColumns?: number | react_native_reanimated.SharedValue<number | undefined> | undefined;
            onRefresh?: (() => void) | react_native_reanimated.SharedValue<(() => void) | null | undefined> | null | undefined;
            onViewableItemsChanged?: ((info: {
                viewableItems: react_native.ViewToken<unknown>[];
                changed: react_native.ViewToken<unknown>[];
            }) => void) | react_native_reanimated.SharedValue<((info: {
                viewableItems: react_native.ViewToken<unknown>[];
                changed: react_native.ViewToken<unknown>[];
            }) => void) | null | undefined> | null | undefined;
            refreshing?: boolean | react_native_reanimated.SharedValue<boolean | null | undefined> | null | undefined;
            renderItem: react_native.ListRenderItem<unknown> | react_native_reanimated.SharedValue<react_native.ListRenderItem<unknown> | null | undefined> | null | undefined;
            viewabilityConfig?: react_native.ViewabilityConfig | react_native_reanimated.SharedValue<react_native.ViewabilityConfig | undefined> | undefined;
            ItemSeparatorComponent?: react.ComponentType<any> | react_native_reanimated.SharedValue<react.ComponentType<any> | null | undefined> | null | undefined;
            ListEmptyComponent?: react.ReactElement<unknown, string | react.JSXElementConstructor<any>> | react.ComponentType<any> | react_native_reanimated.SharedValue<react.ReactElement<unknown, string | react.JSXElementConstructor<any>> | react.ComponentType<any> | null | undefined> | null | undefined;
            ListFooterComponent?: react.ReactElement<unknown, string | react.JSXElementConstructor<any>> | react.ComponentType<any> | react_native_reanimated.SharedValue<react.ReactElement<unknown, string | react.JSXElementConstructor<any>> | react.ComponentType<any> | null | undefined> | null | undefined;
            ListHeaderComponent?: react.ReactElement<unknown, string | react.JSXElementConstructor<any>> | react.ComponentType<any> | react_native_reanimated.SharedValue<react.ReactElement<unknown, string | react.JSXElementConstructor<any>> | react.ComponentType<any> | null | undefined> | null | undefined;
            debug?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            disableVirtualization?: boolean | react_native_reanimated.SharedValue<boolean | undefined> | undefined;
            getItem?: ((data: any, index: number) => unknown) | react_native_reanimated.SharedValue<((data: any, index: number) => unknown) | undefined> | undefined;
            getItemCount?: ((data: any) => number) | react_native_reanimated.SharedValue<((data: any) => number) | undefined> | undefined;
            inverted?: boolean | react_native_reanimated.SharedValue<boolean | null | undefined> | null | undefined;
            maxToRenderPerBatch?: number | react_native_reanimated.SharedValue<number | undefined> | undefined;
            onEndReached?: ((info: {
                distanceFromEnd: number;
            }) => void) | react_native_reanimated.SharedValue<((info: {
                distanceFromEnd: number;
            }) => void) | null | undefined> | null | undefined;
            onEndReachedThreshold?: number | react_native_reanimated.SharedValue<number | null | undefined> | null | undefined;
            onScrollToIndexFailed?: ((info: {
                index: number;
                highestMeasuredFrameIndex: number;
                averageItemLength: number;
            }) => void) | react_native_reanimated.SharedValue<((info: {
                index: number;
                highestMeasuredFrameIndex: number;
                averageItemLength: number;
            }) => void) | undefined> | undefined;
            onStartReached?: ((info: {
                distanceFromStart: number;
            }) => void) | react_native_reanimated.SharedValue<((info: {
                distanceFromStart: number;
            }) => void) | null | undefined> | null | undefined;
            onStartReachedThreshold?: number | react_native_reanimated.SharedValue<number | null | undefined> | null | undefined;
            progressViewOffset?: number | react_native_reanimated.SharedValue<number | undefined> | undefined;
            renderScrollComponent?: ((props: react_native.ScrollViewProps) => React.ReactElement<react_native.ScrollViewProps>) | react_native_reanimated.SharedValue<((props: react_native.ScrollViewProps) => React.ReactElement<react_native.ScrollViewProps>) | undefined> | undefined;
            updateCellsBatchingPeriod?: number | react_native_reanimated.SharedValue<number | undefined> | undefined;
            viewabilityConfigCallbackPairs?: react_native.ViewabilityConfigCallbackPairs | react_native_reanimated.SharedValue<react_native.ViewabilityConfigCallbackPairs | undefined> | undefined;
            windowSize?: number | react_native_reanimated.SharedValue<number | undefined> | undefined;
            CellRendererComponent?: react.ComponentType<react_native.CellRendererProps<unknown>> | react_native_reanimated.SharedValue<react.ComponentType<react_native.CellRendererProps<unknown>> | null | undefined> | null | undefined;
        } & {
            style?: react_native.StyleProp<react_native_reanimated.AnimatedStyle<react_native.StyleProp<react_native.ViewStyle>>>;
            contentContainerStyle?: react_native.StyleProp<react_native_reanimated.AnimatedStyle<react_native.StyleProp<react_native.ViewStyle>>>;
            indicatorStyle?: react_native.StyleProp<react_native_reanimated.AnimatedStyle<"default" | "black" | "white" | undefined>>;
            columnWrapperStyle?: react_native.StyleProp<react_native_reanimated.AnimatedStyle<react_native.StyleProp<react_native.ViewStyle>>>;
            ListFooterComponentStyle?: react_native.StyleProp<react_native_reanimated.AnimatedStyle<react_native.StyleProp<react_native.ViewStyle>>>;
            ListHeaderComponentStyle?: react_native.StyleProp<react_native_reanimated.AnimatedStyle<react_native.StyleProp<react_native.ViewStyle>>>;
        } & {
            layout?: react_native_reanimated.BaseAnimationBuilder | react_native_reanimated.LayoutAnimationFunction | typeof react_native_reanimated.BaseAnimationBuilder;
            entering?: react_native_reanimated.BaseAnimationBuilder | typeof react_native_reanimated.BaseAnimationBuilder | react_native_reanimated.EntryExitAnimationFunction | react_native_reanimated_lib_typescript_layoutReanimation_animationBuilder_Keyframe.ReanimatedKeyframe;
            exiting?: react_native_reanimated.BaseAnimationBuilder | typeof react_native_reanimated.BaseAnimationBuilder | react_native_reanimated.EntryExitAnimationFunction | react_native_reanimated_lib_typescript_layoutReanimation_animationBuilder_Keyframe.ReanimatedKeyframe;
        } & {
            sharedTransitionTag?: string;
            sharedTransitionStyle?: react_native_reanimated.SharedTransition;
        }> | undefined;
    } & react.RefAttributes<never>>>;
    defaultScreenOptions: () => {
        readonly presentation: "containedTransparentModal";
        readonly headerShown: false;
        readonly animation: "none";
    };
    presets: typeof presets;
    specs: typeof specs;
    /**
     * Create a transition aware component
     */
    createTransitionAwareComponent: typeof createTransitionAwareComponent;
    /**
     * Create a transition aware scrollable component
     */
    createTransitionAwareScrollable: typeof createTransitionAwareScrollable;
    /**
     * Create a transitionable native stack navigator.
     *
     */
    createTransitionableStackNavigator: typeof createTransitionableStackNavigator;
    /**
     * @deprecated Use {@link createTransitionableStackNavigator} instead.
     */
    createConfig: ({ navigation: reactNavigation, route, ...config }: TransitionEventHandlersProps) => TransitionListeners;
    /**
     * @deprecated Use {@link createTransitionableStackNavigator} instead.
     */
    createScreenConfig: (config?: Omit<TransitionEventHandlersProps, "navigation" | "route">) => {
        listeners: (l: Any) => Partial<{
            [x: string]: _react_navigation_native.EventListenerCallback<_react_navigation_native.EventMapBase & _react_navigation_native.EventMapCore<Readonly<{
                key: string;
                index: number;
                routeNames: string[];
                history?: unknown[];
                routes: _react_navigation_native.NavigationRoute<_react_navigation_native.ParamListBase, string>[];
                type: string;
                stale: false;
            }>>, string, boolean | undefined>;
            focus: _react_navigation_native.EventListenerCallback<_react_navigation_native.EventMapBase & _react_navigation_native.EventMapCore<Readonly<{
                key: string;
                index: number;
                routeNames: string[];
                history?: unknown[];
                routes: _react_navigation_native.NavigationRoute<_react_navigation_native.ParamListBase, string>[];
                type: string;
                stale: false;
            }>>, "focus", unknown>;
            blur: _react_navigation_native.EventListenerCallback<_react_navigation_native.EventMapBase & _react_navigation_native.EventMapCore<Readonly<{
                key: string;
                index: number;
                routeNames: string[];
                history?: unknown[];
                routes: _react_navigation_native.NavigationRoute<_react_navigation_native.ParamListBase, string>[];
                type: string;
                stale: false;
            }>>, "blur", unknown>;
            state: _react_navigation_native.EventListenerCallback<_react_navigation_native.EventMapBase & _react_navigation_native.EventMapCore<Readonly<{
                key: string;
                index: number;
                routeNames: string[];
                history?: unknown[];
                routes: _react_navigation_native.NavigationRoute<_react_navigation_native.ParamListBase, string>[];
                type: string;
                stale: false;
            }>>, "state", unknown>;
            beforeRemove: _react_navigation_native.EventListenerCallback<_react_navigation_native.EventMapBase & _react_navigation_native.EventMapCore<Readonly<{
                key: string;
                index: number;
                routeNames: string[];
                history?: unknown[];
                routes: _react_navigation_native.NavigationRoute<_react_navigation_native.ParamListBase, string>[];
                type: string;
                stale: false;
            }>>, "beforeRemove", true>;
        }>;
    };
};

export { type TransitionConfig, type TransitionStackNavigatorTypeBag, _default as default, useScreenAnimation };
